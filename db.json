{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/archer/.gitignore","hash":"d734edbdd316a19eae0ac2421256ac60dd61a1f8","modified":1526982984947},{"_id":"themes/archer/README.md","hash":"931f09a3903e57cbc3964d55bee766f0854e5504","modified":1526982984948},{"_id":"themes/archer/.eslintrc.json","hash":"f398447605f56aa0bb9e250f8df0651a1f79ac45","modified":1526982984946},{"_id":"themes/archer/LICENSE","hash":"35f4fb806270f8243459c870a2141e795dfab166","modified":1526982984948},{"_id":"themes/archer/package.json","hash":"08b951aa508d5341d260b186c77ba083ec4c96bc","modified":1526982984974},{"_id":"themes/archer/gulpfile.js","hash":"4425599995b6c818274f4a27067f484eaf357d05","modified":1526982984954},{"_id":"themes/archer/_config.yml","hash":"a0c4c8c20ad139814da586800c60e8a5299e3cfc","modified":1526984404369},{"_id":"source/_posts/Dockerfile-syntax.md","hash":"6ab92cd5a7d540f7ba911d4563d8195dc0b6146f","modified":1527041409074},{"_id":"source/_posts/Kubernetes-deploy-Jenkins-slave.md","hash":"1231212bdd4e0b1720ccd9c097e9cd62ab7c3042","modified":1527041478191},{"_id":"source/_posts/docker-install-note.md","hash":"06f8b99914df30423a7ae0bf4c487c4ccd3a8794","modified":1527041503749},{"_id":"source/_posts/docker-traefik-usage.md","hash":"456bd520f551bfe4511daa408d54eaa13d55b583","modified":1527041494924},{"_id":"source/_posts/kubernetes-configmap-usage.md","hash":"cbf8e68acbafbda1818973708bbe8450f40616be","modified":1527041550973},{"_id":"source/_posts/kubernetes-java-client.md","hash":"1c9901c485b5666817297525b1ef4e7ec8fa1520","modified":1527041461361},{"_id":"themes/archer/webpack.prod.js","hash":"b6d35f7e9a9718b3e5e3e17c52fcc5e7c38330b0","modified":1526982985016},{"_id":"themes/archer/webpack.config.js","hash":"369feedf559c96614506523dbabe95206ef2d20c","modified":1526982985015},{"_id":"themes/archer/layout/404.ejs","hash":"a054b4ea1147846bed4252dd56182cb8e32d95eb","modified":1526982984955},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"f20432b5b6453ad7f452b06d5adbfe558a15646f","modified":1526982984951},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"8a544d8196d456cbae1de78ba01bd7530f9653b1","modified":1526982984951},{"_id":"themes/archer/docs/README-en.md","hash":"8457bd15ae645feebe3805c8eb6cb5aad35647bf","modified":1526982984950},{"_id":"themes/archer/layout/about.ejs","hash":"990df15653a99453617e72dfc195fa0a75b9a5d1","modified":1526982984968},{"_id":"themes/archer/layout/site-meta.ejs","hash":"28b014bc19e934e3b118064e32d68d8a32a6a682","modified":1526982984970},{"_id":"themes/archer/layout/index.ejs","hash":"ca1e93247351c10095f2bf16efe31019ce31b040","modified":1526982984969},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"92da263076aa7c54b9b651d744b7261a2df39072","modified":1526982984956},{"_id":"themes/archer/layout/post.ejs","hash":"1bb8e91270080e3ffd953de0ae2525440a16e428","modified":1526982984970},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"af76b1a18a63934e83b078bf5f9f886e972a0ceb","modified":1526982984957},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"4cb37ffc2e1a625ad0742ab35a29864413eb58eb","modified":1526982984956},{"_id":"themes/archer/layout/layout.ejs","hash":"d6dd2fed52fdbf9efb2d6d1b1b732f03f5c80507","modified":1526982984969},{"_id":"themes/archer/layout/_partial/base-share.ejs","hash":"593398145ff712f3c01fff9fe2d2b38bfa8bb20b","modified":1526982984959},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"065f8d6c4aae6782e6819815911f7feb6402a4ec","modified":1526982984958},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"dcf88c81a85232f8298c5327673da7147214a677","modified":1526982984959},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"0f0d285babc69dd0eda7dd0e790f0faac6bef63d","modified":1526982984955},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"e1b4893af2b18f502bad1b552c3f3381ecc3021f","modified":1526982984960},{"_id":"themes/archer/source/assets/favicon.ico","hash":"876bc62fdae04dccebc1367cc24c081077c13ab8","modified":1526983309515},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1526982984975},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"92ac580acc20bde7b3345bfe132671b9043bfbd6","modified":1526982984960},{"_id":"themes/archer/source/css/mobile.css","hash":"a647f4c9867beffe610c4d638b9443151be6e879","modified":1526982984978},{"_id":"themes/archer/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1526982984976},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1526982984977},{"_id":"themes/archer/source/css/style.css","hash":"9aec132fcffcc1d8430aba5e883326176f81fa85","modified":1526982984978},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1526982984981},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1526982984981},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"fc03729825ac7ffd4045f910bbd936bc5841c65e","modified":1526982984965},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"6f18a92bbe8bed93113449ed6ff8d148c1e7565a","modified":1526982984993},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1526982984995},{"_id":"themes/archer/src/scss/_common.scss","hash":"95f061298cd824fe9f09dabe70dcb4fb44097557","modified":1526982985002},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"9123aa118cc636b4bfe718b87274d0b9732d8e89","modified":1526982985004},{"_id":"themes/archer/source/scripts/main.js","hash":"bccc18ea2748d557c95e0edcf3ad9fbcbc0f7577","modified":1526982984994},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"46d9e40be9000d23494a80cdd74fea61328ffdfa","modified":1526982985003},{"_id":"themes/archer/src/scss/_variables.scss","hash":"35111feb58a46ed571d6de03e37f6ea39f07865a","modified":1526982985012},{"_id":"themes/archer/src/scss/mobile.scss","hash":"0156e4ab64a20850d1bd7bb8413445ad8cf6b737","modified":1526982985013},{"_id":"themes/archer/src/js/browser.js","hash":"6e98eacb585fc24fe1f14e80dcb8d3b7d1b463fb","modified":1526982984996},{"_id":"themes/archer/src/scss/style.scss","hash":"ff391096622b1f3e1f44aea92c78c1a336a21b2f","modified":1526982985014},{"_id":"themes/archer/src/js/fancybox.js","hash":"62a190b65d777057e86394d81869fbfa5051ca28","modified":1526982984996},{"_id":"themes/archer/src/js/initSidebar.js","hash":"d94a9da296c56e9b75def4386849df2b3b80e982","modified":1526982984997},{"_id":"themes/archer/src/js/main.js","hash":"20d90f771cb981c8a1ccf8366940a06288c2da99","modified":1526982984998},{"_id":"themes/archer/src/js/init.js","hash":"fb1ea412d1306f07a62f95c56c732ad891036769","modified":1526982984997},{"_id":"themes/archer/src/js/mobile.js","hash":"27b974d628a94f5abd700ca7757bcd153d866442","modified":1526982984998},{"_id":"themes/archer/src/js/scroll.js","hash":"149f251f6ae1a319eecfc903ece61b9a6f4bede4","modified":1526982984999},{"_id":"themes/archer/src/js/sidebar.js","hash":"a90865aefc0f933d391c297ebf06960ac322af34","modified":1526982985000},{"_id":"themes/archer/src/js/share.js","hash":"0c0ccd800e063bda901b99e5bfbe96c72723e5ba","modified":1526982985000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526982984961},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1526982984985},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1526982984980},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1526982984982},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1526982984983},{"_id":"themes/archer/src/js/tag.js","hash":"18f58d928583ba84f2c53d069d57acd4d21677af","modified":1526982985001},{"_id":"themes/archer/src/js/toc.js","hash":"e6778bb114307cccdb5462b150fb4c79e0435f99","modified":1526982985001},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1526982984993},{"_id":"themes/archer/src/js/util.js","hash":"da642e9e6b50ef56a6f85dab85d19b087e4ba373","modified":1526982985002},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"c043a98e33252b9a628bfd31c4a3b2883dce2b99","modified":1526982984962},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"60189b4c02a1b886ecfdc758c55c9a24fa7d36af","modified":1526982984961},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"483c07212879b116b772f428547c9962be96d2ce","modified":1526982984963},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cfdb15116abe89f4b54f7bb18a0b23a597c47a60","modified":1526982984962},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c22a713d188bf15e5db02b69b2b3714eb431dc79","modified":1526982984964},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"a6acb5d7778ade98ba5b6932e38a585460513f49","modified":1526982984963},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"c5ce643a06a2103aa4ac0d8279c024f90886d37f","modified":1526982984966},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"e96750b1aa7113322696857882b1e1fde11c1fc4","modified":1526982984968},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"4feb7c3d17a3c8994eb095d43d75fbd0f1ed5b4f","modified":1526982984967},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"10258d5ac3124bca5d87efbb519e1493b99ffc6d","modified":1526982985004},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"eeb2aa6eaa2f6d8a9ce978757ca12fd34b384090","modified":1526982985005},{"_id":"themes/archer/package-lock.json","hash":"2026ba03b7414e699731f6c2b01684a6e9dc8f1f","modified":1526982984973},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1526982984953},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"63625b081a2a32747ca12b02286e5e05d58af508","modified":1526982985009},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"288628a147d042a4d6dcb5a28fef5da46389de8f","modified":1526982984965},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1526982984987},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1526982984991},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"237a1b8002661065407a6bf96c3188eb09597525","modified":1526982984966},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"690f6188fdf0113b0ce6d28a97b872ce0f52f792","modified":1526982985007},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"fd3eba7a312ae38b978829aca7c7428a9c5d4762","modified":1526982985006},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"ad14edda32d4e3f05819eda783db321402d37356","modified":1526982985008},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"f166c2ba859f2ce76e7ade441c83cbc81bdf184e","modified":1526982985006},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"e88fa63587af0ee490591ff5e8953c8e875dcfd6","modified":1526982985008},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"93cd6d629472a409199ebe432380261ab0973dca","modified":1526982985011},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"eabe9fd56908ce595eedc90bb211412aba5d433c","modified":1526982985009},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"5510884dd3b02190d6daf63dc4ac516c12e26216","modified":1526982985010},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"ff4e9e3f2eaeb7eb3071a666cdfa61eabad92e3c","modified":1526982985011},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"90617295ae34d29d69b0b336454963ac0adb30db","modified":1526982985012},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1526982984990},{"_id":"public/content.json","hash":"803946d092128fc41142d75685378d74da7d0cf2","modified":1527041577440},{"_id":"public/2018/05/23/kubernetes-java-client/index.html","hash":"79a61da35fffd1ced72b64decb4b1880c7590bab","modified":1527041415600},{"_id":"public/2018/05/23/Kubernetes-deploy-Jenkins-slave/index.html","hash":"3136bedf291489e4cba5cf242f33360622412d13","modified":1527041415610},{"_id":"public/2018/05/23/kubernetes-configmap-usage/index.html","hash":"3047f87738a70887f8f25bc69949003218f2068a","modified":1527041415611},{"_id":"public/2018/05/23/Dockerfile-syntax/index.html","hash":"bd90eb3c4121ac6e89f342a21644f5d1537ddc4a","modified":1527041372643},{"_id":"public/2018/05/23/docker-traefik-usage/index.html","hash":"696f435163b09d71aecfd4d298ebe6e49bc760f0","modified":1527041415611},{"_id":"public/2018/05/23/docker-install-note/index.html","hash":"305ab53e8ce03b2e9de6c401340e77ed7b76114a","modified":1527041415611},{"_id":"public/index.html","hash":"db80e0a1563fc1d750c2c448e0d95d616be524d6","modified":1527041577555},{"_id":"public/archives/index.html","hash":"22cd54e0f5facfe9c80da313f8699eefde37ae5e","modified":1527041577556},{"_id":"public/archives/2018/index.html","hash":"22cd54e0f5facfe9c80da313f8699eefde37ae5e","modified":1527041577556},{"_id":"public/archives/2018/05/index.html","hash":"bf4e5e108a68eb823be8621cc678f5dea45822a4","modified":1527041415611},{"_id":"public/tags/docker/index.html","hash":"1052e4fe94b7d6d4e2c31e4446d7a35a0893bc2d","modified":1527041577557},{"_id":"public/tags/kubernetes/index.html","hash":"7601bf62fb394429ad49df79cdbe3914aca8c6d8","modified":1527041577557},{"_id":"public/tags/jenkins/index.html","hash":"783bc85b665ec313a022b12569b6efdd93547ead","modified":1527041577557},{"_id":"public/tags/configmap/index.html","hash":"8e19a3c53074a52c877295eca30483cceb7b9bdf","modified":1527041577557},{"_id":"public/assets/favicon.ico","hash":"876bc62fdae04dccebc1367cc24c081077c13ab8","modified":1527041372648},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1527041372648},{"_id":"public/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1527041372648},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1527041372648},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1527041372648},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1527041372648},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1527041372651},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1527041372652},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1527041372652},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1527041372652},{"_id":"public/css/mobile.css","hash":"9f41ba01a5b00d8ffa7e4128183cf1a2b5248b09","modified":1527041372654},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1527041372654},{"_id":"public/css/style.css","hash":"51a2e2923e87979c87a156f2536a34036c8390f6","modified":1527041372654},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1527041372654},{"_id":"public/scripts/main.js","hash":"bccc18ea2748d557c95e0edcf3ad9fbcbc0f7577","modified":1527041372654},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1527041372654},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1527041372655},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1527041372655},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1527041372657},{"_id":"public/2018/03/01/Dockerfile-syntax/index.html","hash":"b8cb060ca32f709b56424565373c26fe2a9c53b6","modified":1527041577503},{"_id":"public/archives/2018/03/index.html","hash":"141bc1e91716fff322627237393a72bc77809e6d","modified":1527041577556},{"_id":"public/2018/04/27/kubernetes-configmap-usage/index.html","hash":"15d181afdec454a7de4f1950dbf44d06ea15e67a","modified":1527041577557},{"_id":"public/2018/03/29/kubernetes-java-client/index.html","hash":"8663af9bcb53e56f0410066ecf96955bd6b55d33","modified":1527041577557},{"_id":"public/2018/03/29/docker-traefik-usage/index.html","hash":"a8f2603dd0d790b71181a8992ddda23d181cca25","modified":1527041577557},{"_id":"public/2018/03/11/Kubernetes-deploy-Jenkins-slave/index.html","hash":"81506de6cb726471001776583e983bb32e9b8c2c","modified":1527041577558},{"_id":"public/2018/01/11/docker-install-note/index.html","hash":"12bf2ded79b22807a26584b378a206bb39c9e5ba","modified":1527041577558},{"_id":"public/archives/2018/01/index.html","hash":"b1564adfdf7985a72254c4d0b5f6e99ba48758f3","modified":1527041577558},{"_id":"public/archives/2018/04/index.html","hash":"8e19a3c53074a52c877295eca30483cceb7b9bdf","modified":1527041577558}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Dockerfile语法结构","date":"2018-02-28T16:00:00.000Z","_content":"Dockerfile语法结构\n## Dockerfile 指令\n\nDockerfile 有以下指令选项:\n### FROM  \nFROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的\t公共库 pull 镜像下来。\n```\nFROM <image>:<tag> \n```\n\n### MAINTAINER\n指定创建镜像的用户\n```\nMAINTAINER <name>\n```\n\n### RUN\n有两种使用方式\n```\nRUN \"executable\", \"param1\", \"param2\"\n```\n每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都\t在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史\t提交点来创建，类似源码的版本控制。\n\nexec 方式会被解析为一个 JSON 数组，所以必须使用双引号而不是单引号。exec 方式\t不会调用一个命令 shell，所以也就不会继承相应的变量，如：\n```\nRUN [ \"echo\", \"$HOME\" ]\n```\n\n这种方式是不会达到输出 HOME 变量的，正确的方式应该是这样的\n```\nRUN [ \"sh\", \"-c\", \"echo\", \"$HOME\" ]\n```\n\n### CMD\nCMD有三种使用方式:\n```\nCMD \"executable\",\"param1\",\"param2\"\nCMD \"param1\",\"param2\"\nCMD command param1 param2 (shell form)\n```\n\n### EXPOSE\n告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或\t-P选项生效。\n```\nEXPOSE <port> [<port>...]  \n```\n\n### ENV\n指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留。\n```\nENV <key> <value>       # 只能设置一个变量\n```\n\n### ADD\n```\nADD <src> <dest>\nADD tomcat7.sh /etc/init.d/tomcat7\n```\n所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，\t那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的\t压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果<src>是文件且<dest>中不使\t用斜杠结束，则会将<dest>视为文件，<src>的内容会写入<dest>；如果<src>是文件且\t<dest>中使用斜杠结束，则会<src>文件拷贝到<dest>目录下。\n\nADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。\n支持通过 GO 的正则模糊匹配，具体规则可参见 Go filepath.Match\n```\nADD hom* /mydir/        # adds all files starting with \"hom\"\nADD hom?.txt /mydir/    # ? is replaced with any single character\n```\n路径必须是绝对路径，如果 不存在，会自动创建对应目录\n路径必须是 Dockerfile 所在路径的相对路径\n如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制\n\n### COPY\n```\nCOPY <src> <dest>\nCOPY tomcat7.sh /etc/init.d/tomcat7\n```\nCOPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同\t是不能指定远程文件 URLS。\n\n### ENTRYPOINT\n设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。\n两种格式:\n```\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] #(like an exec, the preferred form)  \nENTRYPOINT command param1 param2 #(as a shell) \n```\n该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。\n当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么\tCMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。\n\n#### CMD指令将不会被执行，只有ENTRYPOINT指令被执行  \n```\nCMD echo “Hello, World!”  \nENTRYPOINT ls -l  \n```\n另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是\t一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执\t行命令，而不能指定参数。\n```\nFROM ubuntu  \nCMD [\"-l\"]  \nENTRYPOINT [\"/usr/bin/ls\"]\n```\n\n### VOLUME\n使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以\t共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，\t当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在\tDockerfile中使用该指令。\n```\nVOLUME [\"/tmp/data\"]\n```\n运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面\t的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的\t/tmp/data目录，那么可以运行下面的命令启动一个容器：\n```\ndocker run -t -i -rm -volumes-from container1 image2 bash \n```\ncontainer1为第一个容器的ID，image2为第二个容器运行image的名字。\n\n### USER \n容器运行用户\n```\nUSER root\n```\n\n### WORKDIR\n可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。\n```\nWORKDIR /path/to/workdir  \n```\n\n## Dockerfile例子\n\n```\n# Pull base image  \nFROM ubuntu:13.10  \n  \nMAINTAINER xx \"email\"  \n  \n# all command in one\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\"> /etc/apt/sources.list && \\ \n   apt-get update && \\\n   apt-get -y install curl && \\\n   cd /tmp &&  curl -L 'http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz' -H 'Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile' | tar -xz  && \\\n   mkdir -p /usr/lib/jvm && \\\n   mv /tmp/jdk1.7.0_65/ /usr/lib/jvm/java-7-oracle/  && \\\n   pdate-alternatives --install /usr/bin/java java /usr/lib/jvm/java-7-oracle/bin/java 300 && \\\n   update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-7-oracle/bin/javac 300 && \\\n   cd /tmp && curl -L 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz' | tar -xz && \\\n   mv /tmp/apache-tomcat-7.0.8/ /opt/tomcat7/ && \\\n   chmod 755 /etc/init.d/tomcat7 \n \nENV JAVA_HOME /usr/lib/jvm/java-7-oracle/  \nENV CATALINA_HOME /opt/tomcat7  \nENV PATH $PATH:$CATALINA_HOME/bin  \n\nADD tomcat7.sh /etc/init.d/tomcat7  \n\n# Expose ports.  \nEXPOSE 8080  \n  \n# Define default command.  \nENTRYPOINT service tomcat7 start && tail -f /opt/tomcat7/logs/catalina.out  \n```","source":"_posts/Dockerfile-syntax.md","raw":"---\ntitle: Dockerfile语法结构\ntags: [docker]\ndate: 2018-03-01\n---\nDockerfile语法结构\n## Dockerfile 指令\n\nDockerfile 有以下指令选项:\n### FROM  \nFROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的\t公共库 pull 镜像下来。\n```\nFROM <image>:<tag> \n```\n\n### MAINTAINER\n指定创建镜像的用户\n```\nMAINTAINER <name>\n```\n\n### RUN\n有两种使用方式\n```\nRUN \"executable\", \"param1\", \"param2\"\n```\n每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都\t在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史\t提交点来创建，类似源码的版本控制。\n\nexec 方式会被解析为一个 JSON 数组，所以必须使用双引号而不是单引号。exec 方式\t不会调用一个命令 shell，所以也就不会继承相应的变量，如：\n```\nRUN [ \"echo\", \"$HOME\" ]\n```\n\n这种方式是不会达到输出 HOME 变量的，正确的方式应该是这样的\n```\nRUN [ \"sh\", \"-c\", \"echo\", \"$HOME\" ]\n```\n\n### CMD\nCMD有三种使用方式:\n```\nCMD \"executable\",\"param1\",\"param2\"\nCMD \"param1\",\"param2\"\nCMD command param1 param2 (shell form)\n```\n\n### EXPOSE\n告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或\t-P选项生效。\n```\nEXPOSE <port> [<port>...]  \n```\n\n### ENV\n指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留。\n```\nENV <key> <value>       # 只能设置一个变量\n```\n\n### ADD\n```\nADD <src> <dest>\nADD tomcat7.sh /etc/init.d/tomcat7\n```\n所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，\t那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的\t压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果<src>是文件且<dest>中不使\t用斜杠结束，则会将<dest>视为文件，<src>的内容会写入<dest>；如果<src>是文件且\t<dest>中使用斜杠结束，则会<src>文件拷贝到<dest>目录下。\n\nADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。\n支持通过 GO 的正则模糊匹配，具体规则可参见 Go filepath.Match\n```\nADD hom* /mydir/        # adds all files starting with \"hom\"\nADD hom?.txt /mydir/    # ? is replaced with any single character\n```\n路径必须是绝对路径，如果 不存在，会自动创建对应目录\n路径必须是 Dockerfile 所在路径的相对路径\n如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制\n\n### COPY\n```\nCOPY <src> <dest>\nCOPY tomcat7.sh /etc/init.d/tomcat7\n```\nCOPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同\t是不能指定远程文件 URLS。\n\n### ENTRYPOINT\n设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。\n两种格式:\n```\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] #(like an exec, the preferred form)  \nENTRYPOINT command param1 param2 #(as a shell) \n```\n该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。\n当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么\tCMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。\n\n#### CMD指令将不会被执行，只有ENTRYPOINT指令被执行  \n```\nCMD echo “Hello, World!”  \nENTRYPOINT ls -l  \n```\n另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是\t一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执\t行命令，而不能指定参数。\n```\nFROM ubuntu  \nCMD [\"-l\"]  \nENTRYPOINT [\"/usr/bin/ls\"]\n```\n\n### VOLUME\n使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以\t共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，\t当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在\tDockerfile中使用该指令。\n```\nVOLUME [\"/tmp/data\"]\n```\n运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面\t的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的\t/tmp/data目录，那么可以运行下面的命令启动一个容器：\n```\ndocker run -t -i -rm -volumes-from container1 image2 bash \n```\ncontainer1为第一个容器的ID，image2为第二个容器运行image的名字。\n\n### USER \n容器运行用户\n```\nUSER root\n```\n\n### WORKDIR\n可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。\n```\nWORKDIR /path/to/workdir  \n```\n\n## Dockerfile例子\n\n```\n# Pull base image  \nFROM ubuntu:13.10  \n  \nMAINTAINER xx \"email\"  \n  \n# all command in one\nRUN echo \"deb http://archive.ubuntu.com/ubuntu precise main universe\"> /etc/apt/sources.list && \\ \n   apt-get update && \\\n   apt-get -y install curl && \\\n   cd /tmp &&  curl -L 'http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz' -H 'Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile' | tar -xz  && \\\n   mkdir -p /usr/lib/jvm && \\\n   mv /tmp/jdk1.7.0_65/ /usr/lib/jvm/java-7-oracle/  && \\\n   pdate-alternatives --install /usr/bin/java java /usr/lib/jvm/java-7-oracle/bin/java 300 && \\\n   update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-7-oracle/bin/javac 300 && \\\n   cd /tmp && curl -L 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz' | tar -xz && \\\n   mv /tmp/apache-tomcat-7.0.8/ /opt/tomcat7/ && \\\n   chmod 755 /etc/init.d/tomcat7 \n \nENV JAVA_HOME /usr/lib/jvm/java-7-oracle/  \nENV CATALINA_HOME /opt/tomcat7  \nENV PATH $PATH:$CATALINA_HOME/bin  \n\nADD tomcat7.sh /etc/init.d/tomcat7  \n\n# Expose ports.  \nEXPOSE 8080  \n  \n# Define default command.  \nENTRYPOINT service tomcat7 start && tail -f /opt/tomcat7/logs/catalina.out  \n```","slug":"Dockerfile-syntax","published":1,"updated":"2018-05-23T02:10:09.074Z","_id":"cjhigz1zn0000n8vrfmqn8236","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Dockerfile语法结构</p>\n<h2 id=\"Dockerfile-指令\"><a href=\"#Dockerfile-指令\" class=\"headerlink\" title=\"Dockerfile 指令\"></a>Dockerfile 指令</h2><p>Dockerfile 有以下指令选项:</p>\n<h3 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h3><p>FROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的    公共库 pull 镜像下来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h3><p>指定创建镜像的用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h3><p>有两种使用方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN &quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;</span><br></pre></td></tr></table></figure></p>\n<p>每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都    在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史    提交点来创建，类似源码的版本控制。</p>\n<p>exec 方式会被解析为一个 JSON 数组，所以必须使用双引号而不是单引号。exec 方式    不会调用一个命令 shell，所以也就不会继承相应的变量，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [ &quot;echo&quot;, &quot;$HOME&quot; ]</span><br></pre></td></tr></table></figure></p>\n<p>这种方式是不会达到输出 HOME 变量的，正确的方式应该是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo&quot;, &quot;$HOME&quot; ]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD有三种使用方式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD &quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;</span><br><span class=\"line\">CMD &quot;param1&quot;,&quot;param2&quot;</span><br><span class=\"line\">CMD command param1 param2 (shell form)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h3><p>告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或    -P选项生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h3><p>指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;       # 只能设置一个变量</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;src&gt; &lt;dest&gt;</span><br><span class=\"line\">ADD tomcat7.sh /etc/init.d/tomcat7</span><br></pre></td></tr></table></figure>\n<p>所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，    那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的    压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果<src>是文件且<dest>中不使    用斜杠结束，则会将<dest>视为文件，<src>的内容会写入<dest>；如果<src>是文件且    <dest>中使用斜杠结束，则会<src>文件拷贝到<dest>目录下。</dest></src></dest></src></dest></src></dest></dest></src></p>\n<p>ADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。<br>支持通过 GO 的正则模糊匹配，具体规则可参见 Go filepath.Match<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD hom* /mydir/        # adds all files starting with &quot;hom&quot;</span><br><span class=\"line\">ADD hom?.txt /mydir/    # ? is replaced with any single character</span><br></pre></td></tr></table></figure></p>\n<p>路径必须是绝对路径，如果 不存在，会自动创建对应目录<br>路径必须是 Dockerfile 所在路径的相对路径<br>如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制</p>\n<h3 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;src&gt; &lt;dest&gt;</span><br><span class=\"line\">COPY tomcat7.sh /etc/init.d/tomcat7</span><br></pre></td></tr></table></figure>\n<p>COPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同    是不能指定远程文件 URLS。</p>\n<h3 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h3><p>设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。<br>两种格式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] #(like an exec, the preferred form)  </span><br><span class=\"line\">ENTRYPOINT command param1 param2 #(as a shell)</span><br></pre></td></tr></table></figure></p>\n<p>该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。<br>当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么    CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。</p>\n<h4 id=\"CMD指令将不会被执行，只有ENTRYPOINT指令被执行\"><a href=\"#CMD指令将不会被执行，只有ENTRYPOINT指令被执行\" class=\"headerlink\" title=\"CMD指令将不会被执行，只有ENTRYPOINT指令被执行\"></a>CMD指令将不会被执行，只有ENTRYPOINT指令被执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD echo “Hello, World!”  </span><br><span class=\"line\">ENTRYPOINT ls -l</span><br></pre></td></tr></table></figure>\n<p>另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是    一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执    行命令，而不能指定参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu  </span><br><span class=\"line\">CMD [&quot;-l&quot;]  </span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/bin/ls&quot;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h3><p>使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以    共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，    当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在    Dockerfile中使用该指令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;/tmp/data&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面    的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的    /tmp/data目录，那么可以运行下面的命令启动一个容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i -rm -volumes-from container1 image2 bash</span><br></pre></td></tr></table></figure></p>\n<p>container1为第一个容器的ID，image2为第二个容器运行image的名字。</p>\n<h3 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h3><p>容器运行用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER root</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h3><p>可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dockerfile例子\"><a href=\"#Dockerfile例子\" class=\"headerlink\" title=\"Dockerfile例子\"></a>Dockerfile例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull base image  </span><br><span class=\"line\">FROM ubuntu:13.10  </span><br><span class=\"line\">  </span><br><span class=\"line\">MAINTAINER xx &quot;email&quot;  </span><br><span class=\"line\">  </span><br><span class=\"line\"># all command in one</span><br><span class=\"line\">RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot;&gt; /etc/apt/sources.list &amp;&amp; \\ </span><br><span class=\"line\">   apt-get update &amp;&amp; \\</span><br><span class=\"line\">   apt-get -y install curl &amp;&amp; \\</span><br><span class=\"line\">   cd /tmp &amp;&amp;  curl -L &apos;http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz&apos; -H &apos;Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile&apos; | tar -xz  &amp;&amp; \\</span><br><span class=\"line\">   mkdir -p /usr/lib/jvm &amp;&amp; \\</span><br><span class=\"line\">   mv /tmp/jdk1.7.0_65/ /usr/lib/jvm/java-7-oracle/  &amp;&amp; \\</span><br><span class=\"line\">   pdate-alternatives --install /usr/bin/java java /usr/lib/jvm/java-7-oracle/bin/java 300 &amp;&amp; \\</span><br><span class=\"line\">   update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-7-oracle/bin/javac 300 &amp;&amp; \\</span><br><span class=\"line\">   cd /tmp &amp;&amp; curl -L &apos;http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz&apos; | tar -xz &amp;&amp; \\</span><br><span class=\"line\">   mv /tmp/apache-tomcat-7.0.8/ /opt/tomcat7/ &amp;&amp; \\</span><br><span class=\"line\">   chmod 755 /etc/init.d/tomcat7 </span><br><span class=\"line\"> </span><br><span class=\"line\">ENV JAVA_HOME /usr/lib/jvm/java-7-oracle/  </span><br><span class=\"line\">ENV CATALINA_HOME /opt/tomcat7  </span><br><span class=\"line\">ENV PATH $PATH:$CATALINA_HOME/bin  </span><br><span class=\"line\"></span><br><span class=\"line\">ADD tomcat7.sh /etc/init.d/tomcat7  </span><br><span class=\"line\"></span><br><span class=\"line\"># Expose ports.  </span><br><span class=\"line\">EXPOSE 8080  </span><br><span class=\"line\">  </span><br><span class=\"line\"># Define default command.  </span><br><span class=\"line\">ENTRYPOINT service tomcat7 start &amp;&amp; tail -f /opt/tomcat7/logs/catalina.out</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Dockerfile语法结构</p>\n<h2 id=\"Dockerfile-指令\"><a href=\"#Dockerfile-指令\" class=\"headerlink\" title=\"Dockerfile 指令\"></a>Dockerfile 指令</h2><p>Dockerfile 有以下指令选项:</p>\n<h3 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h3><p>FROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的    公共库 pull 镜像下来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h3><p>指定创建镜像的用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h3><p>有两种使用方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN &quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;</span><br></pre></td></tr></table></figure></p>\n<p>每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都    在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史    提交点来创建，类似源码的版本控制。</p>\n<p>exec 方式会被解析为一个 JSON 数组，所以必须使用双引号而不是单引号。exec 方式    不会调用一个命令 shell，所以也就不会继承相应的变量，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [ &quot;echo&quot;, &quot;$HOME&quot; ]</span><br></pre></td></tr></table></figure></p>\n<p>这种方式是不会达到输出 HOME 变量的，正确的方式应该是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo&quot;, &quot;$HOME&quot; ]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD有三种使用方式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD &quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;</span><br><span class=\"line\">CMD &quot;param1&quot;,&quot;param2&quot;</span><br><span class=\"line\">CMD command param1 param2 (shell form)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h3><p>告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或    -P选项生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h3><p>指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;       # 只能设置一个变量</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;src&gt; &lt;dest&gt;</span><br><span class=\"line\">ADD tomcat7.sh /etc/init.d/tomcat7</span><br></pre></td></tr></table></figure>\n<p>所有拷贝到container中的文件和文件夹权限为0755，uid和gid为0；如果是一个目录，    那么会将该目录下的所有文件添加到container中，不包括目录；如果文件是可识别的    压缩格式，则docker会帮忙解压缩（注意压缩格式）；如果<src>是文件且<dest>中不使    用斜杠结束，则会将<dest>视为文件，<src>的内容会写入<dest>；如果<src>是文件且    <dest>中使用斜杠结束，则会<src>文件拷贝到<dest>目录下。</dest></src></dest></src></dest></src></dest></dest></src></p>\n<p>ADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。<br>支持通过 GO 的正则模糊匹配，具体规则可参见 Go filepath.Match<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD hom* /mydir/        # adds all files starting with &quot;hom&quot;</span><br><span class=\"line\">ADD hom?.txt /mydir/    # ? is replaced with any single character</span><br></pre></td></tr></table></figure></p>\n<p>路径必须是绝对路径，如果 不存在，会自动创建对应目录<br>路径必须是 Dockerfile 所在路径的相对路径<br>如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制</p>\n<h3 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;src&gt; &lt;dest&gt;</span><br><span class=\"line\">COPY tomcat7.sh /etc/init.d/tomcat7</span><br></pre></td></tr></table></figure>\n<p>COPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同    是不能指定远程文件 URLS。</p>\n<h3 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h3><p>设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。<br>两种格式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] #(like an exec, the preferred form)  </span><br><span class=\"line\">ENTRYPOINT command param1 param2 #(as a shell)</span><br></pre></td></tr></table></figure></p>\n<p>该指令的使用分为两种情况，一种是独自使用，另一种和CMD指令配合使用。<br>当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么    CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。</p>\n<h4 id=\"CMD指令将不会被执行，只有ENTRYPOINT指令被执行\"><a href=\"#CMD指令将不会被执行，只有ENTRYPOINT指令被执行\" class=\"headerlink\" title=\"CMD指令将不会被执行，只有ENTRYPOINT指令被执行\"></a>CMD指令将不会被执行，只有ENTRYPOINT指令被执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD echo “Hello, World!”  </span><br><span class=\"line\">ENTRYPOINT ls -l</span><br></pre></td></tr></table></figure>\n<p>另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是    一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执    行命令，而不能指定参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu  </span><br><span class=\"line\">CMD [&quot;-l&quot;]  </span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/bin/ls&quot;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h3><p>使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以    共享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，    当容器关闭后，所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在    Dockerfile中使用该指令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;/tmp/data&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>运行通过该Dockerfile生成image的容器，/tmp/data目录中的数据在容器关闭后，里面    的数据还存在。例如另一个容器也有持久化数据的需求，且想使用上面容器共享的    /tmp/data目录，那么可以运行下面的命令启动一个容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i -rm -volumes-from container1 image2 bash</span><br></pre></td></tr></table></figure></p>\n<p>container1为第一个容器的ID，image2为第二个容器运行image的名字。</p>\n<h3 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a>USER</h3><p>容器运行用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER root</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h3><p>可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dockerfile例子\"><a href=\"#Dockerfile例子\" class=\"headerlink\" title=\"Dockerfile例子\"></a>Dockerfile例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Pull base image  </span><br><span class=\"line\">FROM ubuntu:13.10  </span><br><span class=\"line\">  </span><br><span class=\"line\">MAINTAINER xx &quot;email&quot;  </span><br><span class=\"line\">  </span><br><span class=\"line\"># all command in one</span><br><span class=\"line\">RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot;&gt; /etc/apt/sources.list &amp;&amp; \\ </span><br><span class=\"line\">   apt-get update &amp;&amp; \\</span><br><span class=\"line\">   apt-get -y install curl &amp;&amp; \\</span><br><span class=\"line\">   cd /tmp &amp;&amp;  curl -L &apos;http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz&apos; -H &apos;Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile&apos; | tar -xz  &amp;&amp; \\</span><br><span class=\"line\">   mkdir -p /usr/lib/jvm &amp;&amp; \\</span><br><span class=\"line\">   mv /tmp/jdk1.7.0_65/ /usr/lib/jvm/java-7-oracle/  &amp;&amp; \\</span><br><span class=\"line\">   pdate-alternatives --install /usr/bin/java java /usr/lib/jvm/java-7-oracle/bin/java 300 &amp;&amp; \\</span><br><span class=\"line\">   update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-7-oracle/bin/javac 300 &amp;&amp; \\</span><br><span class=\"line\">   cd /tmp &amp;&amp; curl -L &apos;http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz&apos; | tar -xz &amp;&amp; \\</span><br><span class=\"line\">   mv /tmp/apache-tomcat-7.0.8/ /opt/tomcat7/ &amp;&amp; \\</span><br><span class=\"line\">   chmod 755 /etc/init.d/tomcat7 </span><br><span class=\"line\"> </span><br><span class=\"line\">ENV JAVA_HOME /usr/lib/jvm/java-7-oracle/  </span><br><span class=\"line\">ENV CATALINA_HOME /opt/tomcat7  </span><br><span class=\"line\">ENV PATH $PATH:$CATALINA_HOME/bin  </span><br><span class=\"line\"></span><br><span class=\"line\">ADD tomcat7.sh /etc/init.d/tomcat7  </span><br><span class=\"line\"></span><br><span class=\"line\"># Expose ports.  </span><br><span class=\"line\">EXPOSE 8080  </span><br><span class=\"line\">  </span><br><span class=\"line\"># Define default command.  </span><br><span class=\"line\">ENTRYPOINT service tomcat7 start &amp;&amp; tail -f /opt/tomcat7/logs/catalina.out</span><br></pre></td></tr></table></figure>"},{"title":"Kubernetes部署Jenkins并动态资源分配","date":"2018-03-10T16:00:00.000Z","_content":"基于Kubernetes部署Jenkins，JenkinsSlave动态分配\n\n## 部署nfs服务\n需要把jenkins的home目录做持久化，解决方案用nfs\n  ①用外部nfs服务\n  ②在docker里面部署一个nfs服务\n  我们使用第二种方案\n这里还可以把编排到某个node，可以参考<br>https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n\n### 部署nfs\nnfs所在机器ip：192.168.10.93\n```\n$ docker run -d -p 2049:2049 \\\n   --name nfs \\\n   --privileged \\ \n   -e SHARED_DIRECTORY=/nfsshare \\\n   -v /opt/nfsshare:/nfsshare \\\n   --restart=always \\\n   itsthenetwork/nfs-server-alpine:7\n```\n\n### 查看nfs服务启动情况\n```\n$ docker logs nfs\n```\n```\n...\nStarting NFS in the background...\nrpc.nfsd: knfsd is currently down\nrpc.nfsd: Writing version string to kernel: -2 -3 +4 \nrpc.nfsd: Created AF_INET TCP socket.\nrpc.nfsd: Created AF_INET6 TCP socket.\nExporting File System...\nexporting *:/nfsshare\nStarting Mountd in the background...\n```\n\n### 测试nfs服务是否正常\n```\n#创建一个test目录\n$ mkdir -p /opt/nfsshare/test\n\n#把nfs根目录挂载到/mnt/下\n$ mount -t nfs 192.168.10.93:/ /mnt/\n\n#查看/mnt/下是否有test目录, 如果有，表示正常\n$ ls /mnt/\n\ntest\n```\n\n## 使用PersistentVolume持久化卷\n参考：https://jimmysong.io/kubernetes-handbook/concepts/persistent-volume.html\n### jenkins slave 数据持久化卷\njenkins slave 数据持久化卷\ncipvc.yaml\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: cipv01\n  namespace: ci\nspec:\n  capacity:\n    storage: 2Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n  nfs:\n    path: /jenkins\n    #这里填nfs服务器ip（前面nfs的地址）\n    server: 192.168.10.93\n    \n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: cipvc01\n  namespace: ci\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: slow\n```\n\n部署持久化卷\n```      \nkubelet apply -f cipvc.yaml\n```\n\n### mavan本地仓库久化卷\nmvnpvc.yaml\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mvnpv\n  namespace: ci\nspec:\n  capacity:\n    storage: 2Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n  nfs:\n    path: /mavenLocalRepo\n    server: 192.168.10.93\n\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: mvnpvc\n  namespace: ci\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: slow\n```\n部署持久化卷\n```\nkubelet apply -f mvnpvc.yaml\n```\n\n### 查看pcv\n```\n$ kubectl get pvc -n ci\n\nNAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                 STORAGECLASS   REASON    AGE\ncipv01            2Gi        RWX            Recycle          Bound     ci/cipvc01            slow                     16h\nmvnpv             2Gi        RWX            Recycle          Bound     ci/mvnpvc             slow                     16h\n\n状态是Bound才可用\n```\n\n## 部署jenkins\njenkins.yaml\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ci\n  \n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: ci\n  \n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: ci\n  \n---\nkind: Deployment\napiVersion: apps/v1beta2\nmetadata:\n  name: jenkins\n  namespace: ci\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jenkins\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        app: jenkins\n    spec:\n      serviceAccount: jenkins\n      securityContext:\n       runAsUser: 0\n      containers:\n      - name: jenkins\n        image: jenkinsci/blueocean:1.3.5\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 8080\n          name: web\n          protocol: TCP\n        env:\n        - name: PORT\n          value: '8000'\n        - containerPort: 50000\n          name: agent\n          protocol: TCP\n        volumeMounts:\n        - name: jenkinshome\n          mountPath: /var/jenkins_home/\n        env:\n        - name: JAVA_OPTS\n          value: \"-Duser.timezone=Asia/Shanghai\"\n      volumes:\n      - name: jenkinshome\n      \t#pvc模式\n        persistentVolumeClaim:\n          claimName: cipvc01\n        #主机目录模式\n        #hostPath:\n         # directory location on host\n         #path: /opt/jenkins-blueocean-data\n         # this field is optional\n         #type: DirectoryOrCreate\n\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: jenkine-data-pv\n  namespace: ci\nspec:\n  capacity:\n    storage: 5Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n  nfs:\n    path: /jenkins-blueocean-data\n    server: 192.168.10.93\n    \n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: jenkine-data-pvc\n  namespace: ci\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 5Gi\n  storageClassName: slow\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    app: jenkins\n  name: jenkins\n  namespace: ci\nspec:\n  ports:\n  - port: 8090\n    targetPort: 8080\n    name: web\n  - port: 50000\n    targetPort: 50000\n    name: agent\n  selector:\n    app: jenkins\n  type: LoadBalancer\n```\n\n部署jenkins\n```\n$ kubectl apply -f jenkins.yaml\n```\n\n查看svc\n```\n$ kubectl get svc -n ci  \nNAME      TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                          AGE\njenkins   LoadBalancer   10.101.147.82   <pending>     8090:31830/TCP,50000:31870/TCP   8h\n```\n\n## 配置jenkins\n访问master/node:31830 端口，可用访问到jenkins\n配置好jenkins后，打开系统管理>插件管理>可选插件\n安装Kubernetes plugin\n安装好后，系统管理>系统设置>新增一个Kubernetes\n\n配置一下几项即可\n```\nName           kubernetes\nKubernetes URL https://kubernetes.default.svc.cluster.local\n#用svc的域名访问。端口是jenkins service的端口\nJenkins URL    http://jenkins.ci.svc.cluster.local:8090\n```\n\n## 测试\n\n接下来新建一个测试pipeline job\n\n填入以下代码：\n```\npodTemplate(label: 'slave',  containers: [\n    containerTemplate(\n            name: 'jnlp',\n            image: 'dongamp1990/jenkins-slave-docker-glibc-jdk8-git-maven',\n            args: '${computer.jnlpmac} ${computer.name}',\n            command: ''\n    )\n  ]\n  ,volumes: [\n        persistentVolumeClaim(mountPath: '/home/jenkins', claimName: 'cipvc01', readOnly: false),\n        persistentVolumeClaim(mountPath: '/root/.m2/repository', claimName: 'mvnpvc', readOnly: false),\n        //hostPathVolume(hostPath: '/jenkins-blueocean-data', mountPath: '/home/jenkins'),\n        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),\n        hostPathVolume(hostPath: '/tmp/', mountPath: '/tmp/'),\n]) \n{    node ('slave') {\n        container('jnlp') {\n            stage('colne code') {\n                try{\n                    sh 'git clone --local https://github.com/dongamp1990/demo.git'\n                }catch(e){\n                    dir('demo/demo'){\n                        sh 'git reset --hard && git pull'\n                    }\n                }\n                dir('demo/demo') {\n                    sh 'mvn -X clean install'\n                    sh 'ls -l ./target'\n                }\n            }\n            stage('dockerinfo') {\n                sh 'pwd' \n            }    \n        }\n    }\n}\n```\n\n保存后，点立即构建，查看Console Output，不出意外，应该会有maven的编译日志和ls -l ./target的日志输出","source":"_posts/Kubernetes-deploy-Jenkins-slave.md","raw":"---\ntitle: Kubernetes部署Jenkins并动态资源分配\ntags: [kubernetes, jenkins]\ndate: 2018-03-11\n---\n基于Kubernetes部署Jenkins，JenkinsSlave动态分配\n\n## 部署nfs服务\n需要把jenkins的home目录做持久化，解决方案用nfs\n  ①用外部nfs服务\n  ②在docker里面部署一个nfs服务\n  我们使用第二种方案\n这里还可以把编排到某个node，可以参考<br>https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n\n### 部署nfs\nnfs所在机器ip：192.168.10.93\n```\n$ docker run -d -p 2049:2049 \\\n   --name nfs \\\n   --privileged \\ \n   -e SHARED_DIRECTORY=/nfsshare \\\n   -v /opt/nfsshare:/nfsshare \\\n   --restart=always \\\n   itsthenetwork/nfs-server-alpine:7\n```\n\n### 查看nfs服务启动情况\n```\n$ docker logs nfs\n```\n```\n...\nStarting NFS in the background...\nrpc.nfsd: knfsd is currently down\nrpc.nfsd: Writing version string to kernel: -2 -3 +4 \nrpc.nfsd: Created AF_INET TCP socket.\nrpc.nfsd: Created AF_INET6 TCP socket.\nExporting File System...\nexporting *:/nfsshare\nStarting Mountd in the background...\n```\n\n### 测试nfs服务是否正常\n```\n#创建一个test目录\n$ mkdir -p /opt/nfsshare/test\n\n#把nfs根目录挂载到/mnt/下\n$ mount -t nfs 192.168.10.93:/ /mnt/\n\n#查看/mnt/下是否有test目录, 如果有，表示正常\n$ ls /mnt/\n\ntest\n```\n\n## 使用PersistentVolume持久化卷\n参考：https://jimmysong.io/kubernetes-handbook/concepts/persistent-volume.html\n### jenkins slave 数据持久化卷\njenkins slave 数据持久化卷\ncipvc.yaml\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: cipv01\n  namespace: ci\nspec:\n  capacity:\n    storage: 2Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n  nfs:\n    path: /jenkins\n    #这里填nfs服务器ip（前面nfs的地址）\n    server: 192.168.10.93\n    \n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: cipvc01\n  namespace: ci\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: slow\n```\n\n部署持久化卷\n```      \nkubelet apply -f cipvc.yaml\n```\n\n### mavan本地仓库久化卷\nmvnpvc.yaml\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mvnpv\n  namespace: ci\nspec:\n  capacity:\n    storage: 2Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n  nfs:\n    path: /mavenLocalRepo\n    server: 192.168.10.93\n\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: mvnpvc\n  namespace: ci\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: slow\n```\n部署持久化卷\n```\nkubelet apply -f mvnpvc.yaml\n```\n\n### 查看pcv\n```\n$ kubectl get pvc -n ci\n\nNAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                 STORAGECLASS   REASON    AGE\ncipv01            2Gi        RWX            Recycle          Bound     ci/cipvc01            slow                     16h\nmvnpv             2Gi        RWX            Recycle          Bound     ci/mvnpvc             slow                     16h\n\n状态是Bound才可用\n```\n\n## 部署jenkins\njenkins.yaml\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ci\n  \n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: ci\n  \n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: ci\n  \n---\nkind: Deployment\napiVersion: apps/v1beta2\nmetadata:\n  name: jenkins\n  namespace: ci\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jenkins\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        app: jenkins\n    spec:\n      serviceAccount: jenkins\n      securityContext:\n       runAsUser: 0\n      containers:\n      - name: jenkins\n        image: jenkinsci/blueocean:1.3.5\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 8080\n          name: web\n          protocol: TCP\n        env:\n        - name: PORT\n          value: '8000'\n        - containerPort: 50000\n          name: agent\n          protocol: TCP\n        volumeMounts:\n        - name: jenkinshome\n          mountPath: /var/jenkins_home/\n        env:\n        - name: JAVA_OPTS\n          value: \"-Duser.timezone=Asia/Shanghai\"\n      volumes:\n      - name: jenkinshome\n      \t#pvc模式\n        persistentVolumeClaim:\n          claimName: cipvc01\n        #主机目录模式\n        #hostPath:\n         # directory location on host\n         #path: /opt/jenkins-blueocean-data\n         # this field is optional\n         #type: DirectoryOrCreate\n\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: jenkine-data-pv\n  namespace: ci\nspec:\n  capacity:\n    storage: 5Gi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n  nfs:\n    path: /jenkins-blueocean-data\n    server: 192.168.10.93\n    \n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: jenkine-data-pvc\n  namespace: ci\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 5Gi\n  storageClassName: slow\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    app: jenkins\n  name: jenkins\n  namespace: ci\nspec:\n  ports:\n  - port: 8090\n    targetPort: 8080\n    name: web\n  - port: 50000\n    targetPort: 50000\n    name: agent\n  selector:\n    app: jenkins\n  type: LoadBalancer\n```\n\n部署jenkins\n```\n$ kubectl apply -f jenkins.yaml\n```\n\n查看svc\n```\n$ kubectl get svc -n ci  \nNAME      TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                          AGE\njenkins   LoadBalancer   10.101.147.82   <pending>     8090:31830/TCP,50000:31870/TCP   8h\n```\n\n## 配置jenkins\n访问master/node:31830 端口，可用访问到jenkins\n配置好jenkins后，打开系统管理>插件管理>可选插件\n安装Kubernetes plugin\n安装好后，系统管理>系统设置>新增一个Kubernetes\n\n配置一下几项即可\n```\nName           kubernetes\nKubernetes URL https://kubernetes.default.svc.cluster.local\n#用svc的域名访问。端口是jenkins service的端口\nJenkins URL    http://jenkins.ci.svc.cluster.local:8090\n```\n\n## 测试\n\n接下来新建一个测试pipeline job\n\n填入以下代码：\n```\npodTemplate(label: 'slave',  containers: [\n    containerTemplate(\n            name: 'jnlp',\n            image: 'dongamp1990/jenkins-slave-docker-glibc-jdk8-git-maven',\n            args: '${computer.jnlpmac} ${computer.name}',\n            command: ''\n    )\n  ]\n  ,volumes: [\n        persistentVolumeClaim(mountPath: '/home/jenkins', claimName: 'cipvc01', readOnly: false),\n        persistentVolumeClaim(mountPath: '/root/.m2/repository', claimName: 'mvnpvc', readOnly: false),\n        //hostPathVolume(hostPath: '/jenkins-blueocean-data', mountPath: '/home/jenkins'),\n        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),\n        hostPathVolume(hostPath: '/tmp/', mountPath: '/tmp/'),\n]) \n{    node ('slave') {\n        container('jnlp') {\n            stage('colne code') {\n                try{\n                    sh 'git clone --local https://github.com/dongamp1990/demo.git'\n                }catch(e){\n                    dir('demo/demo'){\n                        sh 'git reset --hard && git pull'\n                    }\n                }\n                dir('demo/demo') {\n                    sh 'mvn -X clean install'\n                    sh 'ls -l ./target'\n                }\n            }\n            stage('dockerinfo') {\n                sh 'pwd' \n            }    \n        }\n    }\n}\n```\n\n保存后，点立即构建，查看Console Output，不出意外，应该会有maven的编译日志和ls -l ./target的日志输出","slug":"Kubernetes-deploy-Jenkins-slave","published":1,"updated":"2018-05-23T02:11:18.191Z","_id":"cjhigz1zs0001n8vrdoyf232u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>基于Kubernetes部署Jenkins，JenkinsSlave动态分配</p>\n<h2 id=\"部署nfs服务\"><a href=\"#部署nfs服务\" class=\"headerlink\" title=\"部署nfs服务\"></a>部署nfs服务</h2><p>需要把jenkins的home目录做持久化，解决方案用nfs<br>  ①用外部nfs服务<br>  ②在docker里面部署一个nfs服务<br>  我们使用第二种方案<br>这里还可以把编排到某个node，可以参考<br><a href=\"https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/configuration/assign-pod-node/</a></p>\n<h3 id=\"部署nfs\"><a href=\"#部署nfs\" class=\"headerlink\" title=\"部署nfs\"></a>部署nfs</h3><p>nfs所在机器ip：192.168.10.93<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 2049:2049 \\</span><br><span class=\"line\">   --name nfs \\</span><br><span class=\"line\">   --privileged \\ </span><br><span class=\"line\">   -e SHARED_DIRECTORY=/nfsshare \\</span><br><span class=\"line\">   -v /opt/nfsshare:/nfsshare \\</span><br><span class=\"line\">   --restart=always \\</span><br><span class=\"line\">   itsthenetwork/nfs-server-alpine:7</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看nfs服务启动情况\"><a href=\"#查看nfs服务启动情况\" class=\"headerlink\" title=\"查看nfs服务启动情况\"></a>查看nfs服务启动情况</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker logs nfs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Starting NFS in the background...</span><br><span class=\"line\">rpc.nfsd: knfsd is currently down</span><br><span class=\"line\">rpc.nfsd: Writing version string to kernel: -2 -3 +4 </span><br><span class=\"line\">rpc.nfsd: Created AF_INET TCP socket.</span><br><span class=\"line\">rpc.nfsd: Created AF_INET6 TCP socket.</span><br><span class=\"line\">Exporting File System...</span><br><span class=\"line\">exporting *:/nfsshare</span><br><span class=\"line\">Starting Mountd in the background...</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试nfs服务是否正常\"><a href=\"#测试nfs服务是否正常\" class=\"headerlink\" title=\"测试nfs服务是否正常\"></a>测试nfs服务是否正常</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建一个test目录</span><br><span class=\"line\">$ mkdir -p /opt/nfsshare/test</span><br><span class=\"line\"></span><br><span class=\"line\">#把nfs根目录挂载到/mnt/下</span><br><span class=\"line\">$ mount -t nfs 192.168.10.93:/ /mnt/</span><br><span class=\"line\"></span><br><span class=\"line\">#查看/mnt/下是否有test目录, 如果有，表示正常</span><br><span class=\"line\">$ ls /mnt/</span><br><span class=\"line\"></span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用PersistentVolume持久化卷\"><a href=\"#使用PersistentVolume持久化卷\" class=\"headerlink\" title=\"使用PersistentVolume持久化卷\"></a>使用PersistentVolume持久化卷</h2><p>参考：<a href=\"https://jimmysong.io/kubernetes-handbook/concepts/persistent-volume.html\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/kubernetes-handbook/concepts/persistent-volume.html</a></p>\n<h3 id=\"jenkins-slave-数据持久化卷\"><a href=\"#jenkins-slave-数据持久化卷\" class=\"headerlink\" title=\"jenkins slave 数据持久化卷\"></a>jenkins slave 数据持久化卷</h3><p>jenkins slave 数据持久化卷<br>cipvc.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cipv01</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 2Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\">  mountOptions:</span><br><span class=\"line\">    - hard</span><br><span class=\"line\">    - nfsvers=4.1</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /jenkins</span><br><span class=\"line\">    #这里填nfs服务器ip（前面nfs的地址）</span><br><span class=\"line\">    server: 192.168.10.93</span><br><span class=\"line\">    </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cipvc01</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 2Gi</span><br><span class=\"line\">  storageClassName: slow</span><br></pre></td></tr></table></figure></p>\n<p>部署持久化卷<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubelet apply -f cipvc.yaml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"mavan本地仓库久化卷\"><a href=\"#mavan本地仓库久化卷\" class=\"headerlink\" title=\"mavan本地仓库久化卷\"></a>mavan本地仓库久化卷</h3><p>mvnpvc.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mvnpv</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 2Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\">  mountOptions:</span><br><span class=\"line\">    - hard</span><br><span class=\"line\">    - nfsvers=4.1</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /mavenLocalRepo</span><br><span class=\"line\">    server: 192.168.10.93</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mvnpvc</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 2Gi</span><br><span class=\"line\">  storageClassName: slow</span><br></pre></td></tr></table></figure></p>\n<p>部署持久化卷<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubelet apply -f mvnpvc.yaml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看pcv\"><a href=\"#查看pcv\" class=\"headerlink\" title=\"查看pcv\"></a>查看pcv</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pvc -n ci</span><br><span class=\"line\"></span><br><span class=\"line\">NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                 STORAGECLASS   REASON    AGE</span><br><span class=\"line\">cipv01            2Gi        RWX            Recycle          Bound     ci/cipvc01            slow                     16h</span><br><span class=\"line\">mvnpv             2Gi        RWX            Recycle          Bound     ci/mvnpvc             slow                     16h</span><br><span class=\"line\"></span><br><span class=\"line\">状态是Bound才可用</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署jenkins\"><a href=\"#部署jenkins\" class=\"headerlink\" title=\"部署jenkins\"></a>部署jenkins</h2><p>jenkins.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Namespace</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ci</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">apiVersion: apps/v1beta2</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: jenkins</span><br><span class=\"line\">  strategy:</span><br><span class=\"line\">    type: RollingUpdate</span><br><span class=\"line\">    rollingUpdate:</span><br><span class=\"line\">      maxSurge: 2</span><br><span class=\"line\">      maxUnavailable: 0</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: jenkins</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccount: jenkins</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">       runAsUser: 0</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: jenkins</span><br><span class=\"line\">        image: jenkinsci/blueocean:1.3.5</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 8080</span><br><span class=\"line\">          name: web</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: PORT</span><br><span class=\"line\">          value: &apos;8000&apos;</span><br><span class=\"line\">        - containerPort: 50000</span><br><span class=\"line\">          name: agent</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: jenkinshome</span><br><span class=\"line\">          mountPath: /var/jenkins_home/</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: JAVA_OPTS</span><br><span class=\"line\">          value: &quot;-Duser.timezone=Asia/Shanghai&quot;</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: jenkinshome</span><br><span class=\"line\">      \t#pvc模式</span><br><span class=\"line\">        persistentVolumeClaim:</span><br><span class=\"line\">          claimName: cipvc01</span><br><span class=\"line\">        #主机目录模式</span><br><span class=\"line\">        #hostPath:</span><br><span class=\"line\">         # directory location on host</span><br><span class=\"line\">         #path: /opt/jenkins-blueocean-data</span><br><span class=\"line\">         # this field is optional</span><br><span class=\"line\">         #type: DirectoryOrCreate</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkine-data-pv</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 5Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\">  mountOptions:</span><br><span class=\"line\">    - hard</span><br><span class=\"line\">    - nfsvers=4.1</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /jenkins-blueocean-data</span><br><span class=\"line\">    server: 192.168.10.93</span><br><span class=\"line\">    </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkine-data-pvc</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: jenkins</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 8090</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">    name: web</span><br><span class=\"line\">  - port: 50000</span><br><span class=\"line\">    targetPort: 50000</span><br><span class=\"line\">    name: agent</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: jenkins</span><br><span class=\"line\">  type: LoadBalancer</span><br></pre></td></tr></table></figure></p>\n<p>部署jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f jenkins.yaml</span><br></pre></td></tr></table></figure></p>\n<p>查看svc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc -n ci  </span><br><span class=\"line\">NAME      TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                          AGE</span><br><span class=\"line\">jenkins   LoadBalancer   10.101.147.82   &lt;pending&gt;     8090:31830/TCP,50000:31870/TCP   8h</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置jenkins\"><a href=\"#配置jenkins\" class=\"headerlink\" title=\"配置jenkins\"></a>配置jenkins</h2><p>访问master/node:31830 端口，可用访问到jenkins<br>配置好jenkins后，打开系统管理&gt;插件管理&gt;可选插件<br>安装Kubernetes plugin<br>安装好后，系统管理&gt;系统设置&gt;新增一个Kubernetes</p>\n<p>配置一下几项即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name           kubernetes</span><br><span class=\"line\">Kubernetes URL https://kubernetes.default.svc.cluster.local</span><br><span class=\"line\">#用svc的域名访问。端口是jenkins service的端口</span><br><span class=\"line\">Jenkins URL    http://jenkins.ci.svc.cluster.local:8090</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>接下来新建一个测试pipeline job</p>\n<p>填入以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">podTemplate(label: &apos;slave&apos;,  containers: [</span><br><span class=\"line\">    containerTemplate(</span><br><span class=\"line\">            name: &apos;jnlp&apos;,</span><br><span class=\"line\">            image: &apos;dongamp1990/jenkins-slave-docker-glibc-jdk8-git-maven&apos;,</span><br><span class=\"line\">            args: &apos;$&#123;computer.jnlpmac&#125; $&#123;computer.name&#125;&apos;,</span><br><span class=\"line\">            command: &apos;&apos;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  ,volumes: [</span><br><span class=\"line\">        persistentVolumeClaim(mountPath: &apos;/home/jenkins&apos;, claimName: &apos;cipvc01&apos;, readOnly: false),</span><br><span class=\"line\">        persistentVolumeClaim(mountPath: &apos;/root/.m2/repository&apos;, claimName: &apos;mvnpvc&apos;, readOnly: false),</span><br><span class=\"line\">        //hostPathVolume(hostPath: &apos;/jenkins-blueocean-data&apos;, mountPath: &apos;/home/jenkins&apos;),</span><br><span class=\"line\">        hostPathVolume(hostPath: &apos;/var/run/docker.sock&apos;, mountPath: &apos;/var/run/docker.sock&apos;),</span><br><span class=\"line\">        hostPathVolume(hostPath: &apos;/tmp/&apos;, mountPath: &apos;/tmp/&apos;),</span><br><span class=\"line\">]) </span><br><span class=\"line\">&#123;    node (&apos;slave&apos;) &#123;</span><br><span class=\"line\">        container(&apos;jnlp&apos;) &#123;</span><br><span class=\"line\">            stage(&apos;colne code&apos;) &#123;</span><br><span class=\"line\">                try&#123;</span><br><span class=\"line\">                    sh &apos;git clone --local https://github.com/dongamp1990/demo.git&apos;</span><br><span class=\"line\">                &#125;catch(e)&#123;</span><br><span class=\"line\">                    dir(&apos;demo/demo&apos;)&#123;</span><br><span class=\"line\">                        sh &apos;git reset --hard &amp;&amp; git pull&apos;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dir(&apos;demo/demo&apos;) &#123;</span><br><span class=\"line\">                    sh &apos;mvn -X clean install&apos;</span><br><span class=\"line\">                    sh &apos;ls -l ./target&apos;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stage(&apos;dockerinfo&apos;) &#123;</span><br><span class=\"line\">                sh &apos;pwd&apos; </span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保存后，点立即构建，查看Console Output，不出意外，应该会有maven的编译日志和ls -l ./target的日志输出</p>\n","site":{"data":{}},"excerpt":"","more":"<p>基于Kubernetes部署Jenkins，JenkinsSlave动态分配</p>\n<h2 id=\"部署nfs服务\"><a href=\"#部署nfs服务\" class=\"headerlink\" title=\"部署nfs服务\"></a>部署nfs服务</h2><p>需要把jenkins的home目录做持久化，解决方案用nfs<br>  ①用外部nfs服务<br>  ②在docker里面部署一个nfs服务<br>  我们使用第二种方案<br>这里还可以把编排到某个node，可以参考<br><a href=\"https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/concepts/configuration/assign-pod-node/</a></p>\n<h3 id=\"部署nfs\"><a href=\"#部署nfs\" class=\"headerlink\" title=\"部署nfs\"></a>部署nfs</h3><p>nfs所在机器ip：192.168.10.93<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 2049:2049 \\</span><br><span class=\"line\">   --name nfs \\</span><br><span class=\"line\">   --privileged \\ </span><br><span class=\"line\">   -e SHARED_DIRECTORY=/nfsshare \\</span><br><span class=\"line\">   -v /opt/nfsshare:/nfsshare \\</span><br><span class=\"line\">   --restart=always \\</span><br><span class=\"line\">   itsthenetwork/nfs-server-alpine:7</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看nfs服务启动情况\"><a href=\"#查看nfs服务启动情况\" class=\"headerlink\" title=\"查看nfs服务启动情况\"></a>查看nfs服务启动情况</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker logs nfs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Starting NFS in the background...</span><br><span class=\"line\">rpc.nfsd: knfsd is currently down</span><br><span class=\"line\">rpc.nfsd: Writing version string to kernel: -2 -3 +4 </span><br><span class=\"line\">rpc.nfsd: Created AF_INET TCP socket.</span><br><span class=\"line\">rpc.nfsd: Created AF_INET6 TCP socket.</span><br><span class=\"line\">Exporting File System...</span><br><span class=\"line\">exporting *:/nfsshare</span><br><span class=\"line\">Starting Mountd in the background...</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试nfs服务是否正常\"><a href=\"#测试nfs服务是否正常\" class=\"headerlink\" title=\"测试nfs服务是否正常\"></a>测试nfs服务是否正常</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建一个test目录</span><br><span class=\"line\">$ mkdir -p /opt/nfsshare/test</span><br><span class=\"line\"></span><br><span class=\"line\">#把nfs根目录挂载到/mnt/下</span><br><span class=\"line\">$ mount -t nfs 192.168.10.93:/ /mnt/</span><br><span class=\"line\"></span><br><span class=\"line\">#查看/mnt/下是否有test目录, 如果有，表示正常</span><br><span class=\"line\">$ ls /mnt/</span><br><span class=\"line\"></span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用PersistentVolume持久化卷\"><a href=\"#使用PersistentVolume持久化卷\" class=\"headerlink\" title=\"使用PersistentVolume持久化卷\"></a>使用PersistentVolume持久化卷</h2><p>参考：<a href=\"https://jimmysong.io/kubernetes-handbook/concepts/persistent-volume.html\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/kubernetes-handbook/concepts/persistent-volume.html</a></p>\n<h3 id=\"jenkins-slave-数据持久化卷\"><a href=\"#jenkins-slave-数据持久化卷\" class=\"headerlink\" title=\"jenkins slave 数据持久化卷\"></a>jenkins slave 数据持久化卷</h3><p>jenkins slave 数据持久化卷<br>cipvc.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cipv01</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 2Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\">  mountOptions:</span><br><span class=\"line\">    - hard</span><br><span class=\"line\">    - nfsvers=4.1</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /jenkins</span><br><span class=\"line\">    #这里填nfs服务器ip（前面nfs的地址）</span><br><span class=\"line\">    server: 192.168.10.93</span><br><span class=\"line\">    </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cipvc01</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 2Gi</span><br><span class=\"line\">  storageClassName: slow</span><br></pre></td></tr></table></figure></p>\n<p>部署持久化卷<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubelet apply -f cipvc.yaml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"mavan本地仓库久化卷\"><a href=\"#mavan本地仓库久化卷\" class=\"headerlink\" title=\"mavan本地仓库久化卷\"></a>mavan本地仓库久化卷</h3><p>mvnpvc.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mvnpv</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 2Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\">  mountOptions:</span><br><span class=\"line\">    - hard</span><br><span class=\"line\">    - nfsvers=4.1</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /mavenLocalRepo</span><br><span class=\"line\">    server: 192.168.10.93</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mvnpvc</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 2Gi</span><br><span class=\"line\">  storageClassName: slow</span><br></pre></td></tr></table></figure></p>\n<p>部署持久化卷<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubelet apply -f mvnpvc.yaml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看pcv\"><a href=\"#查看pcv\" class=\"headerlink\" title=\"查看pcv\"></a>查看pcv</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pvc -n ci</span><br><span class=\"line\"></span><br><span class=\"line\">NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                 STORAGECLASS   REASON    AGE</span><br><span class=\"line\">cipv01            2Gi        RWX            Recycle          Bound     ci/cipvc01            slow                     16h</span><br><span class=\"line\">mvnpv             2Gi        RWX            Recycle          Bound     ci/mvnpvc             slow                     16h</span><br><span class=\"line\"></span><br><span class=\"line\">状态是Bound才可用</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署jenkins\"><a href=\"#部署jenkins\" class=\"headerlink\" title=\"部署jenkins\"></a>部署jenkins</h2><p>jenkins.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Namespace</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ci</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">apiVersion: apps/v1beta2</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: jenkins</span><br><span class=\"line\">  strategy:</span><br><span class=\"line\">    type: RollingUpdate</span><br><span class=\"line\">    rollingUpdate:</span><br><span class=\"line\">      maxSurge: 2</span><br><span class=\"line\">      maxUnavailable: 0</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: jenkins</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccount: jenkins</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">       runAsUser: 0</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: jenkins</span><br><span class=\"line\">        image: jenkinsci/blueocean:1.3.5</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 8080</span><br><span class=\"line\">          name: web</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: PORT</span><br><span class=\"line\">          value: &apos;8000&apos;</span><br><span class=\"line\">        - containerPort: 50000</span><br><span class=\"line\">          name: agent</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: jenkinshome</span><br><span class=\"line\">          mountPath: /var/jenkins_home/</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: JAVA_OPTS</span><br><span class=\"line\">          value: &quot;-Duser.timezone=Asia/Shanghai&quot;</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: jenkinshome</span><br><span class=\"line\">      \t#pvc模式</span><br><span class=\"line\">        persistentVolumeClaim:</span><br><span class=\"line\">          claimName: cipvc01</span><br><span class=\"line\">        #主机目录模式</span><br><span class=\"line\">        #hostPath:</span><br><span class=\"line\">         # directory location on host</span><br><span class=\"line\">         #path: /opt/jenkins-blueocean-data</span><br><span class=\"line\">         # this field is optional</span><br><span class=\"line\">         #type: DirectoryOrCreate</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkine-data-pv</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 5Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\">  mountOptions:</span><br><span class=\"line\">    - hard</span><br><span class=\"line\">    - nfsvers=4.1</span><br><span class=\"line\">  nfs:</span><br><span class=\"line\">    path: /jenkins-blueocean-data</span><br><span class=\"line\">    server: 192.168.10.93</span><br><span class=\"line\">    </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkine-data-pvc</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\">  storageClassName: slow</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: jenkins</span><br><span class=\"line\">  name: jenkins</span><br><span class=\"line\">  namespace: ci</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 8090</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">    name: web</span><br><span class=\"line\">  - port: 50000</span><br><span class=\"line\">    targetPort: 50000</span><br><span class=\"line\">    name: agent</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: jenkins</span><br><span class=\"line\">  type: LoadBalancer</span><br></pre></td></tr></table></figure></p>\n<p>部署jenkins<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f jenkins.yaml</span><br></pre></td></tr></table></figure></p>\n<p>查看svc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc -n ci  </span><br><span class=\"line\">NAME      TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                          AGE</span><br><span class=\"line\">jenkins   LoadBalancer   10.101.147.82   &lt;pending&gt;     8090:31830/TCP,50000:31870/TCP   8h</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置jenkins\"><a href=\"#配置jenkins\" class=\"headerlink\" title=\"配置jenkins\"></a>配置jenkins</h2><p>访问master/node:31830 端口，可用访问到jenkins<br>配置好jenkins后，打开系统管理&gt;插件管理&gt;可选插件<br>安装Kubernetes plugin<br>安装好后，系统管理&gt;系统设置&gt;新增一个Kubernetes</p>\n<p>配置一下几项即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name           kubernetes</span><br><span class=\"line\">Kubernetes URL https://kubernetes.default.svc.cluster.local</span><br><span class=\"line\">#用svc的域名访问。端口是jenkins service的端口</span><br><span class=\"line\">Jenkins URL    http://jenkins.ci.svc.cluster.local:8090</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>接下来新建一个测试pipeline job</p>\n<p>填入以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">podTemplate(label: &apos;slave&apos;,  containers: [</span><br><span class=\"line\">    containerTemplate(</span><br><span class=\"line\">            name: &apos;jnlp&apos;,</span><br><span class=\"line\">            image: &apos;dongamp1990/jenkins-slave-docker-glibc-jdk8-git-maven&apos;,</span><br><span class=\"line\">            args: &apos;$&#123;computer.jnlpmac&#125; $&#123;computer.name&#125;&apos;,</span><br><span class=\"line\">            command: &apos;&apos;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  ,volumes: [</span><br><span class=\"line\">        persistentVolumeClaim(mountPath: &apos;/home/jenkins&apos;, claimName: &apos;cipvc01&apos;, readOnly: false),</span><br><span class=\"line\">        persistentVolumeClaim(mountPath: &apos;/root/.m2/repository&apos;, claimName: &apos;mvnpvc&apos;, readOnly: false),</span><br><span class=\"line\">        //hostPathVolume(hostPath: &apos;/jenkins-blueocean-data&apos;, mountPath: &apos;/home/jenkins&apos;),</span><br><span class=\"line\">        hostPathVolume(hostPath: &apos;/var/run/docker.sock&apos;, mountPath: &apos;/var/run/docker.sock&apos;),</span><br><span class=\"line\">        hostPathVolume(hostPath: &apos;/tmp/&apos;, mountPath: &apos;/tmp/&apos;),</span><br><span class=\"line\">]) </span><br><span class=\"line\">&#123;    node (&apos;slave&apos;) &#123;</span><br><span class=\"line\">        container(&apos;jnlp&apos;) &#123;</span><br><span class=\"line\">            stage(&apos;colne code&apos;) &#123;</span><br><span class=\"line\">                try&#123;</span><br><span class=\"line\">                    sh &apos;git clone --local https://github.com/dongamp1990/demo.git&apos;</span><br><span class=\"line\">                &#125;catch(e)&#123;</span><br><span class=\"line\">                    dir(&apos;demo/demo&apos;)&#123;</span><br><span class=\"line\">                        sh &apos;git reset --hard &amp;&amp; git pull&apos;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dir(&apos;demo/demo&apos;) &#123;</span><br><span class=\"line\">                    sh &apos;mvn -X clean install&apos;</span><br><span class=\"line\">                    sh &apos;ls -l ./target&apos;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stage(&apos;dockerinfo&apos;) &#123;</span><br><span class=\"line\">                sh &apos;pwd&apos; </span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保存后，点立即构建，查看Console Output，不出意外，应该会有maven的编译日志和ls -l ./target的日志输出</p>\n"},{"title":"安装Docker日志","date":"2018-01-10T16:00:00.000Z","_content":"安装Docker日志\n## 安装Docker\n\n### 系统要求\n查看官方文档 https://docs.docker.com/engine/installation/\n文内使用店是centos7\n\n\n### 删除旧的版本\n```\n$ sudo yum remove docker \\\n docker-common \\\n docker-selinux \\\n docker-engine\n```\n\n### 设置Docker存储库\n安装必要的一些系统工具\n```\n$ sudo yum install -y yum-utils \\\n\tdevice-mapper-persistent-data \\\n\tlvm2\n```\n\n添加软件源信息\n```\n$ sudo yum-config-manager \\\n --add-repo \\\n https://download.docker.com/linux/centos/docker-ce.repo\n```\n \n### 安装docker-ce\n安装docker稳定版\n```\n$ sudo yum install docker-ce-stable\n```\n显示可用的版本\n\n```\n$ yum list docker-ce --showduplicates | sort -r\ndocker-ce.x86_64   17.03.0.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.03.1.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.03.2.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.06.0.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.06.1.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.06.2.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.09.0.ce-1.el7.centos   docker-ce-stable\n```\n\n指定安装版本\n```\n$ yum install -y docker-ce-17.06.2.ce\n```\n\n### 增加阿里云docker镜像，加快镜像pull速度\n```\n#如果没有该文件可以创建一个\n$ vi /etc/docker/daemon.json \n{\n \"registry-mirrors\": [\"https://zln0jqua.mirror.aliyuncs.com\"]\n}\n```\n\n### 启动docker\n```\n$ sudo systemctl start docker\n```\n\n### 运行hello-word验证安装是否正确\n```\n$ sudo docker run hello-world\n```\n\n### 如果启动不了，可以查看日志文件\n```\n$ cat /var/log/upstart/docker.log\n```\n\n### 更多内容可查阅官方的安装文档\nhttps://docs.docker.com/engine/installation/linux/docker-ce/centos/\n\n\n## 安装问题汇总\n安装后启动不了，查看详细日志\n```\n$ ail /var/log/upstart/docker.log\n```\n\n### 启动docker报no available network。\n<font color=red>Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network。</font><br>\n手工添加bridge虚拟网络即可解决\n```\n$ sudo ip link add name docker0 type bridge\n$ sudo ip addr add dev docker0 172.17.0.1/16\n```\n\n### 集群部署，woker节点报错\n<font color=red>starting container failed: error creating external connectivity network: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</font><br>\n可能是docker0的桥接网络网段冲突了。\n```\n查看网络ip\n$ ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:00:01:f0 brd ff:ff:ff:ff:ff:ff\n    inet 10.170.122.155/21 brd 10.170.127.255 scope global eth0\n       valid_lft forever preferred_lft forever\n3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:00:0e:c8 brd ff:ff:ff:ff:ff:ff\n    inet 120.25.105.218/22 brd 120.25.107.255 scope global eth1\n       valid_lft forever preferred_lft forever\n57: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default \n    link/ether 66:f6:dc:19:a1:96 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.1/20 scope global docker0\n       valid_lft forever preferred_lft forever\n\n\n#查看路由表\n$ ip route \ndefault via 120.25.107.247 dev eth1 \n10.0.0.0/8 via 10.170.127.247 dev eth0 \n10.170.120.0/21 dev eth0  proto kernel  scope link  src 10.170.122.155 \n11.0.0.0/8 via 10.170.127.247 dev eth0 \n100.64.0.0/10 via 10.170.127.247 dev eth0 \n120.25.104.0/22 dev eth1  proto kernel  scope link  src 120.25.105.218 \n172.16.0.0/12 via 10.170.127.247 dev eth0 \n192.168.0.0/20 dev docker0  proto kernel  scope link  src 192.168.0.1 \n\n#把路由表的192.168.0.0/20删掉，解决问题。\n\n```\n\n### 配置了内存限制，容器启动报task: non-zero exit (137)\n查看日志/var/log/upstart/docker.log 发现<br>\n<font color=red>Your kernel does not support swap limit capabilities,or the cgroup is not mounted. Memory limited without swap.</font><br>\n\n```\n#修改/etc/default/grub 增加\nGRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\"\n保存\n#更新GRUB\n$ sudo update-grub\n#重启系统\n$ reboot\n```\n\n## 构建docker镜像\n构建一个带了jdk的ubuntu镜像\n\n```\n$ vi Dockerfile\n#基础镜像名称\nFROM ubuntu\n#用来指定镜像创建者信息\nMAINTAINER dong “dongamp1990@gmail.com”\n#工作目录 \nWORKDIR /opt/\n#复制在Dockerfile目录下 复制jdk1.8.0_101.tar.gz 到 /opt目录下, 如果是docker可以识别的压缩包，目的目录不写/会自\t动解压\nADD jdk1.8.0_101.tar.gz /opt\n#执行命令\nRUN mv /opt/jdk1.8.0_101 /opt/jdk8\n#设置环境\nENV JAVA_HOME /opt/jdk8 \nENV PATH $PATH:$JAVA_HOME/bin\n```\n\n打包镜像\n```\n# docker build [OPTIONS] PATH | URL |\n$ docker build -t ubuntu-jdk8 .\n```\n\n查看镜像\n```\n$ docker images\n```\n\n运行镜像\n```\n$ docker run -it ubuntu-jdk8 javac\n```\n\n## Docker使用\n\n### 查看当前镜像\n```\n$ docker images \n```\n\n### 拉取镜像\n```\n$ docker pull ubuntu #拉取latest tag的镜像\n$ docker pull ubuntu:13.10 #拉取指定tag的镜像\n```\n\n### 运行容器\n```\n$ docker run -d -v /opt/eureka/logs/:/opt/logs/ --name eureka -p 8000:8761 springcloud/eureka\n -d 后台运行 \n -v 文件挂载 把容器内的/opt/logs映射到/opt/eureka/logs目录下\n --name 指定容器名称，如果不知道docker会随机生成应用名\n-p 端口映射 8000是外部端口 8761是容器内的端口\n```\n\n### 查看当前运行的容器\n```\n$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS  PORTS  NAMES\n容器ID         镜像      命令        创建时间   状态    端口   容器名称\t\n\ndocker ps -a 查看所有容器\n```\n\n### 停止容器\n```\n$ docker stop CONTAINERID\n```\n\n### 启动容器\n```\n$ docker start CONTAINERID\n```\n\n### 删除镜像 \n```\n$ docker rmi -f imagename[:TAG]\n```\n\n### 容器资源使用统计信息\n官方文档地址：https://docs.docker.com/engine/reference/commandline/stats/\n```\n$ docker stats\n\nCONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\n221f321b1324        0.12%               467.3MiB / 3.858GiB   11.83%              1.08MB / 1.16MB     754kB / 0B          30\nfac3348f831b        0.11%               322.7MiB / 512MiB     63.02%              467MB / 497MB       61.4kB / 0B         52\nd960f8146f1d        1.29%               328.7MiB / 512MiB     64.19%              15.5GB / 18.3GB     20.5kB / 0B         66\nf1441134f6d4        0.87%               367.3MiB / 512MiB     71.73%              5.31GB / 3.81GB     610kB / 0B          71\n9007528c7621        0.00%               6.395MiB / 3.858GiB   0.16%               11.2MB / 51.8MB     5.41MB / 254kB      7\n\n\n使用--format自定义显示数据内容\n\n$ docker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\\t{{.BlockIO}}\"\n\nNAME                                              CONTAINER           CPU %               MEM USAGE / LIMIT     NET I/O             BLOCK I/O\nbrave_kare                                        221f321b1324        0.11%               467.3MiB / 3.858GiB   1.08MB / 1.16MB     754kB / 0B\n1_maxfunPayNewAdmin.1.639izogqf896v2jd4qmyl9c77   fac3348f831b        0.12%               322.7MiB / 512MiB     467MB / 497MB       61.4kB / 0B\n1_maxfunGatewayZuul.1.0gn8x5yd229bjkj35ejjnyi7o   d960f8146f1d        1.41%               328.7MiB / 512MiB     15.5GB / 18.3GB     20.5kB / 0B\n1_maxfunEureka.1.0q690ptcca0cxy7div3o1z92p        f1441134f6d4        0.92%               367.3MiB / 512MiB     5.31GB / 3.81GB     610kB / 0B\nportainer                                         9007528c7621        0.00%               6.395MiB / 3.858GiB   11.2MB / 51.8MB     5.41MB / 254kB\n```\n\n## Docker私服Registry搭建\n\n### 拉取registry v2镜像\n```\n$ docker pull registry:2\n```\n\n### 启动仓库\n```\n$ docker run -d -p 5000:5000 --restart=always --name registry \\ \n  -v /opt/registry/:/var/lib/registry \\ \n  -v /opt/registry/:/tmp/docker-registry.db registry:2\n\n# -v 把registry容器内的/var/lib/registry目录，挂载到/opt/registry目录下，\n  可以把镜像内容也挂载存储到磁盘上，防止registry停止后丢失数据\n\n```\n\n### 标记镜像\n```\n$ docker tag registry:2 192.168.42.132:5000/registry:v2\n```\n\n### 推送镜像到仓库\n```\n$ docker push 192.168.42.132:5000/registry:v2\n```\n如果出现<br>\n<font color=\"red\">Error response from daemon: Get https://192.168.42.132:5000/v2/users/: http: server gave HTTP response to HTTPS client</font><br>\n在/etc/docker/daemon.json里面增加以下配置\n```\n\"insecure-registries\":[\"192.168.42.132:5000\"]\t\n```\n\n### 重启 docker\n```\n$ systemctl restart docker\n```\n\n### 重新推送tag到仓库\n```\n$ docker push 192.168.42.132:5000/registry:v2\n```\n### 查看仓库\n```\n$ curl http://192.168.42.132:5000/v2/_catalog \n# 如果没错，会返回如下内容。\n{\"repositories\":[\"registry\"]}\n```","source":"_posts/docker-install-note.md","raw":"---\ntitle: 安装Docker日志\ntags: [docker]\ndate: 2018-01-11\n---\n安装Docker日志\n## 安装Docker\n\n### 系统要求\n查看官方文档 https://docs.docker.com/engine/installation/\n文内使用店是centos7\n\n\n### 删除旧的版本\n```\n$ sudo yum remove docker \\\n docker-common \\\n docker-selinux \\\n docker-engine\n```\n\n### 设置Docker存储库\n安装必要的一些系统工具\n```\n$ sudo yum install -y yum-utils \\\n\tdevice-mapper-persistent-data \\\n\tlvm2\n```\n\n添加软件源信息\n```\n$ sudo yum-config-manager \\\n --add-repo \\\n https://download.docker.com/linux/centos/docker-ce.repo\n```\n \n### 安装docker-ce\n安装docker稳定版\n```\n$ sudo yum install docker-ce-stable\n```\n显示可用的版本\n\n```\n$ yum list docker-ce --showduplicates | sort -r\ndocker-ce.x86_64   17.03.0.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.03.1.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.03.2.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.06.0.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.06.1.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.06.2.ce-1.el7.centos   docker-ce-stable\ndocker-ce.x86_64   17.09.0.ce-1.el7.centos   docker-ce-stable\n```\n\n指定安装版本\n```\n$ yum install -y docker-ce-17.06.2.ce\n```\n\n### 增加阿里云docker镜像，加快镜像pull速度\n```\n#如果没有该文件可以创建一个\n$ vi /etc/docker/daemon.json \n{\n \"registry-mirrors\": [\"https://zln0jqua.mirror.aliyuncs.com\"]\n}\n```\n\n### 启动docker\n```\n$ sudo systemctl start docker\n```\n\n### 运行hello-word验证安装是否正确\n```\n$ sudo docker run hello-world\n```\n\n### 如果启动不了，可以查看日志文件\n```\n$ cat /var/log/upstart/docker.log\n```\n\n### 更多内容可查阅官方的安装文档\nhttps://docs.docker.com/engine/installation/linux/docker-ce/centos/\n\n\n## 安装问题汇总\n安装后启动不了，查看详细日志\n```\n$ ail /var/log/upstart/docker.log\n```\n\n### 启动docker报no available network。\n<font color=red>Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network。</font><br>\n手工添加bridge虚拟网络即可解决\n```\n$ sudo ip link add name docker0 type bridge\n$ sudo ip addr add dev docker0 172.17.0.1/16\n```\n\n### 集群部署，woker节点报错\n<font color=red>starting container failed: error creating external connectivity network: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</font><br>\n可能是docker0的桥接网络网段冲突了。\n```\n查看网络ip\n$ ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:00:01:f0 brd ff:ff:ff:ff:ff:ff\n    inet 10.170.122.155/21 brd 10.170.127.255 scope global eth0\n       valid_lft forever preferred_lft forever\n3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:00:0e:c8 brd ff:ff:ff:ff:ff:ff\n    inet 120.25.105.218/22 brd 120.25.107.255 scope global eth1\n       valid_lft forever preferred_lft forever\n57: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default \n    link/ether 66:f6:dc:19:a1:96 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.1/20 scope global docker0\n       valid_lft forever preferred_lft forever\n\n\n#查看路由表\n$ ip route \ndefault via 120.25.107.247 dev eth1 \n10.0.0.0/8 via 10.170.127.247 dev eth0 \n10.170.120.0/21 dev eth0  proto kernel  scope link  src 10.170.122.155 \n11.0.0.0/8 via 10.170.127.247 dev eth0 \n100.64.0.0/10 via 10.170.127.247 dev eth0 \n120.25.104.0/22 dev eth1  proto kernel  scope link  src 120.25.105.218 \n172.16.0.0/12 via 10.170.127.247 dev eth0 \n192.168.0.0/20 dev docker0  proto kernel  scope link  src 192.168.0.1 \n\n#把路由表的192.168.0.0/20删掉，解决问题。\n\n```\n\n### 配置了内存限制，容器启动报task: non-zero exit (137)\n查看日志/var/log/upstart/docker.log 发现<br>\n<font color=red>Your kernel does not support swap limit capabilities,or the cgroup is not mounted. Memory limited without swap.</font><br>\n\n```\n#修改/etc/default/grub 增加\nGRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\"\n保存\n#更新GRUB\n$ sudo update-grub\n#重启系统\n$ reboot\n```\n\n## 构建docker镜像\n构建一个带了jdk的ubuntu镜像\n\n```\n$ vi Dockerfile\n#基础镜像名称\nFROM ubuntu\n#用来指定镜像创建者信息\nMAINTAINER dong “dongamp1990@gmail.com”\n#工作目录 \nWORKDIR /opt/\n#复制在Dockerfile目录下 复制jdk1.8.0_101.tar.gz 到 /opt目录下, 如果是docker可以识别的压缩包，目的目录不写/会自\t动解压\nADD jdk1.8.0_101.tar.gz /opt\n#执行命令\nRUN mv /opt/jdk1.8.0_101 /opt/jdk8\n#设置环境\nENV JAVA_HOME /opt/jdk8 \nENV PATH $PATH:$JAVA_HOME/bin\n```\n\n打包镜像\n```\n# docker build [OPTIONS] PATH | URL |\n$ docker build -t ubuntu-jdk8 .\n```\n\n查看镜像\n```\n$ docker images\n```\n\n运行镜像\n```\n$ docker run -it ubuntu-jdk8 javac\n```\n\n## Docker使用\n\n### 查看当前镜像\n```\n$ docker images \n```\n\n### 拉取镜像\n```\n$ docker pull ubuntu #拉取latest tag的镜像\n$ docker pull ubuntu:13.10 #拉取指定tag的镜像\n```\n\n### 运行容器\n```\n$ docker run -d -v /opt/eureka/logs/:/opt/logs/ --name eureka -p 8000:8761 springcloud/eureka\n -d 后台运行 \n -v 文件挂载 把容器内的/opt/logs映射到/opt/eureka/logs目录下\n --name 指定容器名称，如果不知道docker会随机生成应用名\n-p 端口映射 8000是外部端口 8761是容器内的端口\n```\n\n### 查看当前运行的容器\n```\n$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS  PORTS  NAMES\n容器ID         镜像      命令        创建时间   状态    端口   容器名称\t\n\ndocker ps -a 查看所有容器\n```\n\n### 停止容器\n```\n$ docker stop CONTAINERID\n```\n\n### 启动容器\n```\n$ docker start CONTAINERID\n```\n\n### 删除镜像 \n```\n$ docker rmi -f imagename[:TAG]\n```\n\n### 容器资源使用统计信息\n官方文档地址：https://docs.docker.com/engine/reference/commandline/stats/\n```\n$ docker stats\n\nCONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\n221f321b1324        0.12%               467.3MiB / 3.858GiB   11.83%              1.08MB / 1.16MB     754kB / 0B          30\nfac3348f831b        0.11%               322.7MiB / 512MiB     63.02%              467MB / 497MB       61.4kB / 0B         52\nd960f8146f1d        1.29%               328.7MiB / 512MiB     64.19%              15.5GB / 18.3GB     20.5kB / 0B         66\nf1441134f6d4        0.87%               367.3MiB / 512MiB     71.73%              5.31GB / 3.81GB     610kB / 0B          71\n9007528c7621        0.00%               6.395MiB / 3.858GiB   0.16%               11.2MB / 51.8MB     5.41MB / 254kB      7\n\n\n使用--format自定义显示数据内容\n\n$ docker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\\t{{.BlockIO}}\"\n\nNAME                                              CONTAINER           CPU %               MEM USAGE / LIMIT     NET I/O             BLOCK I/O\nbrave_kare                                        221f321b1324        0.11%               467.3MiB / 3.858GiB   1.08MB / 1.16MB     754kB / 0B\n1_maxfunPayNewAdmin.1.639izogqf896v2jd4qmyl9c77   fac3348f831b        0.12%               322.7MiB / 512MiB     467MB / 497MB       61.4kB / 0B\n1_maxfunGatewayZuul.1.0gn8x5yd229bjkj35ejjnyi7o   d960f8146f1d        1.41%               328.7MiB / 512MiB     15.5GB / 18.3GB     20.5kB / 0B\n1_maxfunEureka.1.0q690ptcca0cxy7div3o1z92p        f1441134f6d4        0.92%               367.3MiB / 512MiB     5.31GB / 3.81GB     610kB / 0B\nportainer                                         9007528c7621        0.00%               6.395MiB / 3.858GiB   11.2MB / 51.8MB     5.41MB / 254kB\n```\n\n## Docker私服Registry搭建\n\n### 拉取registry v2镜像\n```\n$ docker pull registry:2\n```\n\n### 启动仓库\n```\n$ docker run -d -p 5000:5000 --restart=always --name registry \\ \n  -v /opt/registry/:/var/lib/registry \\ \n  -v /opt/registry/:/tmp/docker-registry.db registry:2\n\n# -v 把registry容器内的/var/lib/registry目录，挂载到/opt/registry目录下，\n  可以把镜像内容也挂载存储到磁盘上，防止registry停止后丢失数据\n\n```\n\n### 标记镜像\n```\n$ docker tag registry:2 192.168.42.132:5000/registry:v2\n```\n\n### 推送镜像到仓库\n```\n$ docker push 192.168.42.132:5000/registry:v2\n```\n如果出现<br>\n<font color=\"red\">Error response from daemon: Get https://192.168.42.132:5000/v2/users/: http: server gave HTTP response to HTTPS client</font><br>\n在/etc/docker/daemon.json里面增加以下配置\n```\n\"insecure-registries\":[\"192.168.42.132:5000\"]\t\n```\n\n### 重启 docker\n```\n$ systemctl restart docker\n```\n\n### 重新推送tag到仓库\n```\n$ docker push 192.168.42.132:5000/registry:v2\n```\n### 查看仓库\n```\n$ curl http://192.168.42.132:5000/v2/_catalog \n# 如果没错，会返回如下内容。\n{\"repositories\":[\"registry\"]}\n```","slug":"docker-install-note","published":1,"updated":"2018-05-23T02:11:43.749Z","_id":"cjhigz1zv0003n8vrwt0j5asi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装Docker日志</p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h3><p>查看官方文档 <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/</a><br>文内使用店是centos7</p>\n<h3 id=\"删除旧的版本\"><a href=\"#删除旧的版本\" class=\"headerlink\" title=\"删除旧的版本\"></a>删除旧的版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\"> docker-common \\</span><br><span class=\"line\"> docker-selinux \\</span><br><span class=\"line\"> docker-engine</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置Docker存储库\"><a href=\"#设置Docker存储库\" class=\"headerlink\" title=\"设置Docker存储库\"></a>设置Docker存储库</h3><p>安装必要的一些系统工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils \\</span><br><span class=\"line\">\tdevice-mapper-persistent-data \\</span><br><span class=\"line\">\tlvm2</span><br></pre></td></tr></table></figure></p>\n<p>添加软件源信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\"> --add-repo \\</span><br><span class=\"line\"> https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h3><p>安装docker稳定版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce-stable</span><br></pre></td></tr></table></figure></p>\n<p>显示可用的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\">docker-ce.x86_64   17.03.0.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.03.1.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.03.2.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.06.0.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.06.1.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.06.2.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.09.0.ce-1.el7.centos   docker-ce-stable</span><br></pre></td></tr></table></figure>\n<p>指定安装版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker-ce-17.06.2.ce</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"增加阿里云docker镜像，加快镜像pull速度\"><a href=\"#增加阿里云docker镜像，加快镜像pull速度\" class=\"headerlink\" title=\"增加阿里云docker镜像，加快镜像pull速度\"></a>增加阿里云docker镜像，加快镜像pull速度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果没有该文件可以创建一个</span><br><span class=\"line\">$ vi /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;registry-mirrors&quot;: [&quot;https://zln0jqua.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行hello-word验证安装是否正确\"><a href=\"#运行hello-word验证安装是否正确\" class=\"headerlink\" title=\"运行hello-word验证安装是否正确\"></a>运行hello-word验证安装是否正确</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果启动不了，可以查看日志文件\"><a href=\"#如果启动不了，可以查看日志文件\" class=\"headerlink\" title=\"如果启动不了，可以查看日志文件\"></a>如果启动不了，可以查看日志文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /var/log/upstart/docker.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"更多内容可查阅官方的安装文档\"><a href=\"#更多内容可查阅官方的安装文档\" class=\"headerlink\" title=\"更多内容可查阅官方的安装文档\"></a>更多内容可查阅官方的安装文档</h3><p><a href=\"https://docs.docker.com/engine/installation/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/linux/docker-ce/centos/</a></p>\n<h2 id=\"安装问题汇总\"><a href=\"#安装问题汇总\" class=\"headerlink\" title=\"安装问题汇总\"></a>安装问题汇总</h2><p>安装后启动不了，查看详细日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ail /var/log/upstart/docker.log</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动docker报no-available-network。\"><a href=\"#启动docker报no-available-network。\" class=\"headerlink\" title=\"启动docker报no available network。\"></a>启动docker报no available network。</h3><p><font color=\"red\">Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network。</font><br><br>手工添加bridge虚拟网络即可解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ip link add name docker0 type bridge</span><br><span class=\"line\">$ sudo ip addr add dev docker0 172.17.0.1/16</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"集群部署，woker节点报错\"><a href=\"#集群部署，woker节点报错\" class=\"headerlink\" title=\"集群部署，woker节点报错\"></a>集群部署，woker节点报错</h3><p><font color=\"red\">starting container failed: error creating external connectivity network: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</font><br><br>可能是docker0的桥接网络网段冲突了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看网络ip</span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default </span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:16:3e:00:01:f0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.170.122.155/21 brd 10.170.127.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:16:3e:00:0e:c8 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 120.25.105.218/22 brd 120.25.107.255 scope global eth1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">57: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN group default </span><br><span class=\"line\">    link/ether 66:f6:dc:19:a1:96 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.0.1/20 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#查看路由表</span><br><span class=\"line\">$ ip route </span><br><span class=\"line\">default via 120.25.107.247 dev eth1 </span><br><span class=\"line\">10.0.0.0/8 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">10.170.120.0/21 dev eth0  proto kernel  scope link  src 10.170.122.155 </span><br><span class=\"line\">11.0.0.0/8 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">100.64.0.0/10 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">120.25.104.0/22 dev eth1  proto kernel  scope link  src 120.25.105.218 </span><br><span class=\"line\">172.16.0.0/12 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">192.168.0.0/20 dev docker0  proto kernel  scope link  src 192.168.0.1 </span><br><span class=\"line\"></span><br><span class=\"line\">#把路由表的192.168.0.0/20删掉，解决问题。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置了内存限制，容器启动报task-non-zero-exit-137\"><a href=\"#配置了内存限制，容器启动报task-non-zero-exit-137\" class=\"headerlink\" title=\"配置了内存限制，容器启动报task: non-zero exit (137)\"></a>配置了内存限制，容器启动报task: non-zero exit (137)</h3><p>查看日志/var/log/upstart/docker.log 发现<br></p>\n<p><font color=\"red\">Your kernel does not support swap limit capabilities,or the cgroup is not mounted. Memory limited without swap.</font><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改/etc/default/grub 增加</span><br><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</span><br><span class=\"line\">保存</span><br><span class=\"line\">#更新GRUB</span><br><span class=\"line\">$ sudo update-grub</span><br><span class=\"line\">#重启系统</span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建docker镜像\"><a href=\"#构建docker镜像\" class=\"headerlink\" title=\"构建docker镜像\"></a>构建docker镜像</h2><p>构建一个带了jdk的ubuntu镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi Dockerfile</span><br><span class=\"line\">#基础镜像名称</span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">#用来指定镜像创建者信息</span><br><span class=\"line\">MAINTAINER dong “dongamp1990@gmail.com”</span><br><span class=\"line\">#工作目录 </span><br><span class=\"line\">WORKDIR /opt/</span><br><span class=\"line\">#复制在Dockerfile目录下 复制jdk1.8.0_101.tar.gz 到 /opt目录下, 如果是docker可以识别的压缩包，目的目录不写/会自\t动解压</span><br><span class=\"line\">ADD jdk1.8.0_101.tar.gz /opt</span><br><span class=\"line\">#执行命令</span><br><span class=\"line\">RUN mv /opt/jdk1.8.0_101 /opt/jdk8</span><br><span class=\"line\">#设置环境</span><br><span class=\"line\">ENV JAVA_HOME /opt/jdk8 </span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>\n<p>打包镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker build [OPTIONS] PATH | URL |</span><br><span class=\"line\">$ docker build -t ubuntu-jdk8 .</span><br></pre></td></tr></table></figure></p>\n<p>查看镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>运行镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it ubuntu-jdk8 javac</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker使用\"><a href=\"#Docker使用\" class=\"headerlink\" title=\"Docker使用\"></a>Docker使用</h2><h3 id=\"查看当前镜像\"><a href=\"#查看当前镜像\" class=\"headerlink\" title=\"查看当前镜像\"></a>查看当前镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull ubuntu #拉取latest tag的镜像</span><br><span class=\"line\">$ docker pull ubuntu:13.10 #拉取指定tag的镜像</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v /opt/eureka/logs/:/opt/logs/ --name eureka -p 8000:8761 springcloud/eureka</span><br><span class=\"line\"> -d 后台运行 </span><br><span class=\"line\"> -v 文件挂载 把容器内的/opt/logs映射到/opt/eureka/logs目录下</span><br><span class=\"line\"> --name 指定容器名称，如果不知道docker会随机生成应用名</span><br><span class=\"line\">-p 端口映射 8000是外部端口 8761是容器内的端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看当前运行的容器\"><a href=\"#查看当前运行的容器\" class=\"headerlink\" title=\"查看当前运行的容器\"></a>查看当前运行的容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS  PORTS  NAMES</span><br><span class=\"line\">容器ID         镜像      命令        创建时间   状态    端口   容器名称\t</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a 查看所有容器</span><br></pre></td></tr></table></figure>\n<h3 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stop CONTAINERID</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start CONTAINERID</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rmi -f imagename[:TAG]</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器资源使用统计信息\"><a href=\"#容器资源使用统计信息\" class=\"headerlink\" title=\"容器资源使用统计信息\"></a>容器资源使用统计信息</h3><p>官方文档地址：<a href=\"https://docs.docker.com/engine/reference/commandline/stats/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/stats/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stats</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class=\"line\">221f321b1324        0.12%               467.3MiB / 3.858GiB   11.83%              1.08MB / 1.16MB     754kB / 0B          30</span><br><span class=\"line\">fac3348f831b        0.11%               322.7MiB / 512MiB     63.02%              467MB / 497MB       61.4kB / 0B         52</span><br><span class=\"line\">d960f8146f1d        1.29%               328.7MiB / 512MiB     64.19%              15.5GB / 18.3GB     20.5kB / 0B         66</span><br><span class=\"line\">f1441134f6d4        0.87%               367.3MiB / 512MiB     71.73%              5.31GB / 3.81GB     610kB / 0B          71</span><br><span class=\"line\">9007528c7621        0.00%               6.395MiB / 3.858GiB   0.16%               11.2MB / 51.8MB     5.41MB / 254kB      7</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">使用--format自定义显示数据内容</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker stats --format &quot;table &#123;&#123;.Name&#125;&#125;\\t&#123;&#123;.Container&#125;&#125;\\t&#123;&#123;.CPUPerc&#125;&#125;\\t&#123;&#123;.MemUsage&#125;&#125;\\t&#123;&#123;.NetIO&#125;&#125;\\t&#123;&#123;.BlockIO&#125;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                              CONTAINER           CPU %               MEM USAGE / LIMIT     NET I/O             BLOCK I/O</span><br><span class=\"line\">brave_kare                                        221f321b1324        0.11%               467.3MiB / 3.858GiB   1.08MB / 1.16MB     754kB / 0B</span><br><span class=\"line\">1_maxfunPayNewAdmin.1.639izogqf896v2jd4qmyl9c77   fac3348f831b        0.12%               322.7MiB / 512MiB     467MB / 497MB       61.4kB / 0B</span><br><span class=\"line\">1_maxfunGatewayZuul.1.0gn8x5yd229bjkj35ejjnyi7o   d960f8146f1d        1.41%               328.7MiB / 512MiB     15.5GB / 18.3GB     20.5kB / 0B</span><br><span class=\"line\">1_maxfunEureka.1.0q690ptcca0cxy7div3o1z92p        f1441134f6d4        0.92%               367.3MiB / 512MiB     5.31GB / 3.81GB     610kB / 0B</span><br><span class=\"line\">portainer                                         9007528c7621        0.00%               6.395MiB / 3.858GiB   11.2MB / 51.8MB     5.41MB / 254kB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker私服Registry搭建\"><a href=\"#Docker私服Registry搭建\" class=\"headerlink\" title=\"Docker私服Registry搭建\"></a>Docker私服Registry搭建</h2><h3 id=\"拉取registry-v2镜像\"><a href=\"#拉取registry-v2镜像\" class=\"headerlink\" title=\"拉取registry v2镜像\"></a>拉取registry v2镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull registry:2</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动仓库\"><a href=\"#启动仓库\" class=\"headerlink\" title=\"启动仓库\"></a>启动仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 5000:5000 --restart=always --name registry \\ </span><br><span class=\"line\">  -v /opt/registry/:/var/lib/registry \\ </span><br><span class=\"line\">  -v /opt/registry/:/tmp/docker-registry.db registry:2</span><br><span class=\"line\"></span><br><span class=\"line\"># -v 把registry容器内的/var/lib/registry目录，挂载到/opt/registry目录下，</span><br><span class=\"line\">  可以把镜像内容也挂载存储到磁盘上，防止registry停止后丢失数据</span><br></pre></td></tr></table></figure>\n<h3 id=\"标记镜像\"><a href=\"#标记镜像\" class=\"headerlink\" title=\"标记镜像\"></a>标记镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag registry:2 192.168.42.132:5000/registry:v2</span><br></pre></td></tr></table></figure>\n<h3 id=\"推送镜像到仓库\"><a href=\"#推送镜像到仓库\" class=\"headerlink\" title=\"推送镜像到仓库\"></a>推送镜像到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push 192.168.42.132:5000/registry:v2</span><br></pre></td></tr></table></figure>\n<p>如果出现<br></p>\n<p><font color=\"red\">Error response from daemon: Get <a href=\"https://192.168.42.132:5000/v2/users/\" target=\"_blank\" rel=\"noopener\">https://192.168.42.132:5000/v2/users/</a>: http: server gave HTTP response to HTTPS client</font><br><br>在/etc/docker/daemon.json里面增加以下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;insecure-registries&quot;:[&quot;192.168.42.132:5000&quot;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重启-docker\"><a href=\"#重启-docker\" class=\"headerlink\" title=\"重启 docker\"></a>重启 docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新推送tag到仓库\"><a href=\"#重新推送tag到仓库\" class=\"headerlink\" title=\"重新推送tag到仓库\"></a>重新推送tag到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push 192.168.42.132:5000/registry:v2</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看仓库\"><a href=\"#查看仓库\" class=\"headerlink\" title=\"查看仓库\"></a>查看仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl http://192.168.42.132:5000/v2/_catalog </span><br><span class=\"line\"># 如果没错，会返回如下内容。</span><br><span class=\"line\">&#123;&quot;repositories&quot;:[&quot;registry&quot;]&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>安装Docker日志</p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h3><p>查看官方文档 <a href=\"https://docs.docker.com/engine/installation/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/</a><br>文内使用店是centos7</p>\n<h3 id=\"删除旧的版本\"><a href=\"#删除旧的版本\" class=\"headerlink\" title=\"删除旧的版本\"></a>删除旧的版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\"> docker-common \\</span><br><span class=\"line\"> docker-selinux \\</span><br><span class=\"line\"> docker-engine</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置Docker存储库\"><a href=\"#设置Docker存储库\" class=\"headerlink\" title=\"设置Docker存储库\"></a>设置Docker存储库</h3><p>安装必要的一些系统工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils \\</span><br><span class=\"line\">\tdevice-mapper-persistent-data \\</span><br><span class=\"line\">\tlvm2</span><br></pre></td></tr></table></figure></p>\n<p>添加软件源信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\"> --add-repo \\</span><br><span class=\"line\"> https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h3><p>安装docker稳定版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce-stable</span><br></pre></td></tr></table></figure></p>\n<p>显示可用的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\">docker-ce.x86_64   17.03.0.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.03.1.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.03.2.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.06.0.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.06.1.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.06.2.ce-1.el7.centos   docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64   17.09.0.ce-1.el7.centos   docker-ce-stable</span><br></pre></td></tr></table></figure>\n<p>指定安装版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker-ce-17.06.2.ce</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"增加阿里云docker镜像，加快镜像pull速度\"><a href=\"#增加阿里云docker镜像，加快镜像pull速度\" class=\"headerlink\" title=\"增加阿里云docker镜像，加快镜像pull速度\"></a>增加阿里云docker镜像，加快镜像pull速度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果没有该文件可以创建一个</span><br><span class=\"line\">$ vi /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;registry-mirrors&quot;: [&quot;https://zln0jqua.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行hello-word验证安装是否正确\"><a href=\"#运行hello-word验证安装是否正确\" class=\"headerlink\" title=\"运行hello-word验证安装是否正确\"></a>运行hello-word验证安装是否正确</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果启动不了，可以查看日志文件\"><a href=\"#如果启动不了，可以查看日志文件\" class=\"headerlink\" title=\"如果启动不了，可以查看日志文件\"></a>如果启动不了，可以查看日志文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /var/log/upstart/docker.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"更多内容可查阅官方的安装文档\"><a href=\"#更多内容可查阅官方的安装文档\" class=\"headerlink\" title=\"更多内容可查阅官方的安装文档\"></a>更多内容可查阅官方的安装文档</h3><p><a href=\"https://docs.docker.com/engine/installation/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/installation/linux/docker-ce/centos/</a></p>\n<h2 id=\"安装问题汇总\"><a href=\"#安装问题汇总\" class=\"headerlink\" title=\"安装问题汇总\"></a>安装问题汇总</h2><p>安装后启动不了，查看详细日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ail /var/log/upstart/docker.log</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动docker报no-available-network。\"><a href=\"#启动docker报no-available-network。\" class=\"headerlink\" title=\"启动docker报no available network。\"></a>启动docker报no available network。</h3><p><font color=\"red\">Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network。</font><br><br>手工添加bridge虚拟网络即可解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ip link add name docker0 type bridge</span><br><span class=\"line\">$ sudo ip addr add dev docker0 172.17.0.1/16</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"集群部署，woker节点报错\"><a href=\"#集群部署，woker节点报错\" class=\"headerlink\" title=\"集群部署，woker节点报错\"></a>集群部署，woker节点报错</h3><p><font color=\"red\">starting container failed: error creating external connectivity network: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</font><br><br>可能是docker0的桥接网络网段冲突了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看网络ip</span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default </span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:16:3e:00:01:f0 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 10.170.122.155/21 brd 10.170.127.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:16:3e:00:0e:c8 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 120.25.105.218/22 brd 120.25.107.255 scope global eth1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">57: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN group default </span><br><span class=\"line\">    link/ether 66:f6:dc:19:a1:96 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.0.1/20 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#查看路由表</span><br><span class=\"line\">$ ip route </span><br><span class=\"line\">default via 120.25.107.247 dev eth1 </span><br><span class=\"line\">10.0.0.0/8 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">10.170.120.0/21 dev eth0  proto kernel  scope link  src 10.170.122.155 </span><br><span class=\"line\">11.0.0.0/8 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">100.64.0.0/10 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">120.25.104.0/22 dev eth1  proto kernel  scope link  src 120.25.105.218 </span><br><span class=\"line\">172.16.0.0/12 via 10.170.127.247 dev eth0 </span><br><span class=\"line\">192.168.0.0/20 dev docker0  proto kernel  scope link  src 192.168.0.1 </span><br><span class=\"line\"></span><br><span class=\"line\">#把路由表的192.168.0.0/20删掉，解决问题。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置了内存限制，容器启动报task-non-zero-exit-137\"><a href=\"#配置了内存限制，容器启动报task-non-zero-exit-137\" class=\"headerlink\" title=\"配置了内存限制，容器启动报task: non-zero exit (137)\"></a>配置了内存限制，容器启动报task: non-zero exit (137)</h3><p>查看日志/var/log/upstart/docker.log 发现<br></p>\n<p><font color=\"red\">Your kernel does not support swap limit capabilities,or the cgroup is not mounted. Memory limited without swap.</font><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改/etc/default/grub 增加</span><br><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</span><br><span class=\"line\">保存</span><br><span class=\"line\">#更新GRUB</span><br><span class=\"line\">$ sudo update-grub</span><br><span class=\"line\">#重启系统</span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建docker镜像\"><a href=\"#构建docker镜像\" class=\"headerlink\" title=\"构建docker镜像\"></a>构建docker镜像</h2><p>构建一个带了jdk的ubuntu镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi Dockerfile</span><br><span class=\"line\">#基础镜像名称</span><br><span class=\"line\">FROM ubuntu</span><br><span class=\"line\">#用来指定镜像创建者信息</span><br><span class=\"line\">MAINTAINER dong “dongamp1990@gmail.com”</span><br><span class=\"line\">#工作目录 </span><br><span class=\"line\">WORKDIR /opt/</span><br><span class=\"line\">#复制在Dockerfile目录下 复制jdk1.8.0_101.tar.gz 到 /opt目录下, 如果是docker可以识别的压缩包，目的目录不写/会自\t动解压</span><br><span class=\"line\">ADD jdk1.8.0_101.tar.gz /opt</span><br><span class=\"line\">#执行命令</span><br><span class=\"line\">RUN mv /opt/jdk1.8.0_101 /opt/jdk8</span><br><span class=\"line\">#设置环境</span><br><span class=\"line\">ENV JAVA_HOME /opt/jdk8 </span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>\n<p>打包镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker build [OPTIONS] PATH | URL |</span><br><span class=\"line\">$ docker build -t ubuntu-jdk8 .</span><br></pre></td></tr></table></figure></p>\n<p>查看镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>运行镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it ubuntu-jdk8 javac</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker使用\"><a href=\"#Docker使用\" class=\"headerlink\" title=\"Docker使用\"></a>Docker使用</h2><h3 id=\"查看当前镜像\"><a href=\"#查看当前镜像\" class=\"headerlink\" title=\"查看当前镜像\"></a>查看当前镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull ubuntu #拉取latest tag的镜像</span><br><span class=\"line\">$ docker pull ubuntu:13.10 #拉取指定tag的镜像</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v /opt/eureka/logs/:/opt/logs/ --name eureka -p 8000:8761 springcloud/eureka</span><br><span class=\"line\"> -d 后台运行 </span><br><span class=\"line\"> -v 文件挂载 把容器内的/opt/logs映射到/opt/eureka/logs目录下</span><br><span class=\"line\"> --name 指定容器名称，如果不知道docker会随机生成应用名</span><br><span class=\"line\">-p 端口映射 8000是外部端口 8761是容器内的端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看当前运行的容器\"><a href=\"#查看当前运行的容器\" class=\"headerlink\" title=\"查看当前运行的容器\"></a>查看当前运行的容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS  PORTS  NAMES</span><br><span class=\"line\">容器ID         镜像      命令        创建时间   状态    端口   容器名称\t</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a 查看所有容器</span><br></pre></td></tr></table></figure>\n<h3 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stop CONTAINERID</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start CONTAINERID</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rmi -f imagename[:TAG]</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器资源使用统计信息\"><a href=\"#容器资源使用统计信息\" class=\"headerlink\" title=\"容器资源使用统计信息\"></a>容器资源使用统计信息</h3><p>官方文档地址：<a href=\"https://docs.docker.com/engine/reference/commandline/stats/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/stats/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stats</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class=\"line\">221f321b1324        0.12%               467.3MiB / 3.858GiB   11.83%              1.08MB / 1.16MB     754kB / 0B          30</span><br><span class=\"line\">fac3348f831b        0.11%               322.7MiB / 512MiB     63.02%              467MB / 497MB       61.4kB / 0B         52</span><br><span class=\"line\">d960f8146f1d        1.29%               328.7MiB / 512MiB     64.19%              15.5GB / 18.3GB     20.5kB / 0B         66</span><br><span class=\"line\">f1441134f6d4        0.87%               367.3MiB / 512MiB     71.73%              5.31GB / 3.81GB     610kB / 0B          71</span><br><span class=\"line\">9007528c7621        0.00%               6.395MiB / 3.858GiB   0.16%               11.2MB / 51.8MB     5.41MB / 254kB      7</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">使用--format自定义显示数据内容</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker stats --format &quot;table &#123;&#123;.Name&#125;&#125;\\t&#123;&#123;.Container&#125;&#125;\\t&#123;&#123;.CPUPerc&#125;&#125;\\t&#123;&#123;.MemUsage&#125;&#125;\\t&#123;&#123;.NetIO&#125;&#125;\\t&#123;&#123;.BlockIO&#125;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                              CONTAINER           CPU %               MEM USAGE / LIMIT     NET I/O             BLOCK I/O</span><br><span class=\"line\">brave_kare                                        221f321b1324        0.11%               467.3MiB / 3.858GiB   1.08MB / 1.16MB     754kB / 0B</span><br><span class=\"line\">1_maxfunPayNewAdmin.1.639izogqf896v2jd4qmyl9c77   fac3348f831b        0.12%               322.7MiB / 512MiB     467MB / 497MB       61.4kB / 0B</span><br><span class=\"line\">1_maxfunGatewayZuul.1.0gn8x5yd229bjkj35ejjnyi7o   d960f8146f1d        1.41%               328.7MiB / 512MiB     15.5GB / 18.3GB     20.5kB / 0B</span><br><span class=\"line\">1_maxfunEureka.1.0q690ptcca0cxy7div3o1z92p        f1441134f6d4        0.92%               367.3MiB / 512MiB     5.31GB / 3.81GB     610kB / 0B</span><br><span class=\"line\">portainer                                         9007528c7621        0.00%               6.395MiB / 3.858GiB   11.2MB / 51.8MB     5.41MB / 254kB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker私服Registry搭建\"><a href=\"#Docker私服Registry搭建\" class=\"headerlink\" title=\"Docker私服Registry搭建\"></a>Docker私服Registry搭建</h2><h3 id=\"拉取registry-v2镜像\"><a href=\"#拉取registry-v2镜像\" class=\"headerlink\" title=\"拉取registry v2镜像\"></a>拉取registry v2镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull registry:2</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动仓库\"><a href=\"#启动仓库\" class=\"headerlink\" title=\"启动仓库\"></a>启动仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 5000:5000 --restart=always --name registry \\ </span><br><span class=\"line\">  -v /opt/registry/:/var/lib/registry \\ </span><br><span class=\"line\">  -v /opt/registry/:/tmp/docker-registry.db registry:2</span><br><span class=\"line\"></span><br><span class=\"line\"># -v 把registry容器内的/var/lib/registry目录，挂载到/opt/registry目录下，</span><br><span class=\"line\">  可以把镜像内容也挂载存储到磁盘上，防止registry停止后丢失数据</span><br></pre></td></tr></table></figure>\n<h3 id=\"标记镜像\"><a href=\"#标记镜像\" class=\"headerlink\" title=\"标记镜像\"></a>标记镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag registry:2 192.168.42.132:5000/registry:v2</span><br></pre></td></tr></table></figure>\n<h3 id=\"推送镜像到仓库\"><a href=\"#推送镜像到仓库\" class=\"headerlink\" title=\"推送镜像到仓库\"></a>推送镜像到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push 192.168.42.132:5000/registry:v2</span><br></pre></td></tr></table></figure>\n<p>如果出现<br></p>\n<p><font color=\"red\">Error response from daemon: Get <a href=\"https://192.168.42.132:5000/v2/users/\" target=\"_blank\" rel=\"noopener\">https://192.168.42.132:5000/v2/users/</a>: http: server gave HTTP response to HTTPS client</font><br><br>在/etc/docker/daemon.json里面增加以下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;insecure-registries&quot;:[&quot;192.168.42.132:5000&quot;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重启-docker\"><a href=\"#重启-docker\" class=\"headerlink\" title=\"重启 docker\"></a>重启 docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新推送tag到仓库\"><a href=\"#重新推送tag到仓库\" class=\"headerlink\" title=\"重新推送tag到仓库\"></a>重新推送tag到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push 192.168.42.132:5000/registry:v2</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看仓库\"><a href=\"#查看仓库\" class=\"headerlink\" title=\"查看仓库\"></a>查看仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl http://192.168.42.132:5000/v2/_catalog </span><br><span class=\"line\"># 如果没错，会返回如下内容。</span><br><span class=\"line\">&#123;&quot;repositories&quot;:[&quot;registry&quot;]&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Kubernetes ConfigMap使用","date":"2018-03-28T16:00:00.000Z","_content":"摘自：https://jimmysong.io/kubernetes-handbook/concepts/configmap.html\n## ConfigMap\n其实ConfigMap功能在Kubernetes1.2版本的时候就有了，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。这些配置信息需要与docker image解耦，你总不能每修改一个配置就重做一个image吧？ConfigMap API给我们提供了向容器中注入配置信息的机制，ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制大对象。\n\n## ConfigMap概览\nConfigMap API资源用来保存key-value pair配置数据，这个数据可以在pods里使用，或者被用来为像controller一样的系统组件存储配置数据。虽然ConfigMap跟Secrets类似，但是ConfigMap更方便的处理不含敏感信息的字符串。 注意：ConfigMaps不是属性配置文件的替代品。ConfigMaps只是作为多个properties文件的引用。你可以把它理解为Linux系统中的/etc目录，专门用来存储配置文件的目录。下面举个例子，使用ConfigMap配置来创建Kuberntes Volumes，ConfigMap中的每个data项都会成为一个新文件。\n\n```\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  creationTimestamp: 2016-02-18T19:14:38Z\n  name: example-config\n  namespace: default\ndata:\n  example.property.1: hello\n  example.property.2: world\n  example.property.file: |-\n    property.1=value-1\n    property.2=value-2\n    property.3=value-3\n```\n\ndata一栏包括了配置数据，ConfigMap可以被用来保存单个属性，也可以用来保存一个配置文件。 配置数据可以通过很多种方式在Pods里被使用。ConfigMaps可以被用来：\n\n设置环境变量的值\n在容器里设置命令行参数\n在数据卷里面创建config文件\n用户和系统组件两者都可以在ConfigMap里面存储配置数据。\n\n其实不用看下面的文章，直接从kubectl create configmap -h的帮助信息中就可以对ConfigMap究竟如何创建略知一二了。\n\n```\nExamples:\n  # Create a new configmap named my-config based on folder bar\n  kubectl create configmap my-config --from-file=path/to/bar\n\n  # Create a new configmap named my-config with specified keys instead of file basenames on disk\n  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n  # Create a new configmap named my-config with key1=config1 and key2=config2\n  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n```\n\n## 创建ConfigMaps\n可以使用该命令，用给定值、文件或目录来创建ConfigMap。\n```\nkubectl create configmap\n```\n\n### 使用目录创建\n比如我们已经有个了包含一些配置文件，其中包含了我们想要设置的ConfigMap的值：\n```\n$ ls docs/user-guide/configmap/kubectl/\ngame.properties\nui.properties\n\n$ cat docs/user-guide/configmap/kubectl/game.properties\nenemies=aliens\nlives=3\nenemies.cheat=true\nenemies.cheat.level=noGoodRotten\nsecret.code.passphrase=UUDDLRLRBABAS\nsecret.code.allowed=true\nsecret.code.lives=30\n\n$ cat docs/user-guide/configmap/kubectl/ui.properties\ncolor.good=purple\ncolor.bad=yellow\nallow.textmode=true\nhow.nice.to.look=fairlyNice\n```\n使用下面的命令可以创建一个包含目录中所有文件的ConfigMap。\n\n```\n$ kubectl create configmap game-config --from-file=docs/user-guide/configmap/kubectl\n```\n—from-file指定在目录下的所有文件都会被用在ConfigMap里面创建一个键值对，键的名字就是文件名，值就是文件的内容。\n\n让我们来看一下这个命令创建的ConfigMap：\n```\n$ kubectl describe configmaps game-config\nName:           game-config\nNamespace:      default\nLabels:         <none>\nAnnotations:    <none>\n\nData\n====\ngame.properties:        158 bytes\nui.properties:          83 bytes\n```\n我们可以看到那两个key是从kubectl指定的目录中的文件名。这些key的内容可能会很大，所以在kubectl describe的输出中，只能够看到键的名字和他们的大小。 如果想要看到键的值的话，可以使用kubectl get：\n\n```\n$ kubectl get configmaps game-config -o yaml\n```\n### 使用文件创建\n刚才使用目录创建的时候我们—from-file指定的是一个目录，只要指定为一个文件就可以从单个文件中创建ConfigMap。\n\n```\n$ kubectl create configmap game-config-2 --from-file=docs/user-guide/configmap/kubectl/game.properties \n\n$ kubectl get configmaps game-config-2 -o yaml\n```\n—from-file这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的。\n\n### 使用字面值创建\n使用文字值创建，利用—from-literal参数传递配置信息，该参数可以使用多次，格式如下；\n\n```\n$ kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm\n\n$ kubectl get configmaps special-config -o yaml\n```\n\n## Pod中使用ConfigMap\n使用ConfigMap来替代环境变量\nConfigMap可以被用来填入环境变量。看下下面的ConfigMap。\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n```\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: env-config\n  namespace: default\ndata:\n  log_level: INFO\n```\n我们可以在Pod中这样使用ConfigMap：\n### 使用ConfigMap来替代环境变量\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: gcr.io/google_containers/busybox\n      command: [ \"/bin/sh\", \"-c\", \"env\" ]\n      env:\n        - name: SPECIAL_LEVEL_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.how\n        - name: SPECIAL_TYPE_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.type\n      envFrom:\n        - configMapRef:\n            name: env-config\n  restartPolicy: Never\n```\n这个Pod运行后会输出如下几行：\n```\nSPECIAL_LEVEL_KEY=very\nSPECIAL_TYPE_KEY=charm\nlog_level=INFO\n```\n### 用ConfigMap设置命令行参数\nConfigMap也可以被使用来设置容器中的命令或者参数值。它使用的是Kubernetes的$(VAR_NAME)替换语法。我们看下下面这个ConfigMap。\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n```\n为了将ConfigMap中的值注入到命令行的参数里面，我们还要像前面那个例子一样使用环境变量替换语法${VAR_NAME)。（其实这个东西就是给Docker容器设置环境变量，以前我创建镜像的时候经常这么玩，通过docker run的时候指定-e参数修改镜像里的环境变量，然后docker的CMD命令再利用该$(VAR_NAME)通过sed来修改配置文件或者作为命令行启动参数。）\n\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: gcr.io/google_containers/busybox\n      command: [ \"/bin/sh\", \"-c\", \"echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)\" ]\n      env:\n        - name: SPECIAL_LEVEL_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.how\n        - name: SPECIAL_TYPE_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.type\n  restartPolicy: Never\n```\n\n### 通过数据卷插件使用ConfigMap\n在数据卷里面使用这个ConfigMap，有不同的选项。最基本的就是将文件填入数据卷，在这个文件中，键就是文件名，键值就是文件内容：\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: gcr.io/google_containers/busybox\n      command: [ \"/bin/sh\", \"-c\", \"cat /etc/config/special.how\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: special-config\n  restartPolicy: Never\n```\n我们也可以在ConfigMap值被映射的数据卷里控制路径。\n使用前面创建的game-config\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: busybox\n      command: [ \"/bin/sh\",\"-c\",\"ls /etc/config\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: game-config\n  restartPolicy: Never\n```\n\n查看pod日志里面打印出/etc/config目录下的文件\n```\n$ kubectl logs dapi-test-pod test-container\n\ngame.properties\nui.properties\n```","source":"_posts/kubernetes-configmap-usage.md","raw":"---\ntitle: Kubernetes ConfigMap使用\ntags: [kubernetes, configmap]\ndate: 2018-03-29\n---\n摘自：https://jimmysong.io/kubernetes-handbook/concepts/configmap.html\n## ConfigMap\n其实ConfigMap功能在Kubernetes1.2版本的时候就有了，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。这些配置信息需要与docker image解耦，你总不能每修改一个配置就重做一个image吧？ConfigMap API给我们提供了向容器中注入配置信息的机制，ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制大对象。\n\n## ConfigMap概览\nConfigMap API资源用来保存key-value pair配置数据，这个数据可以在pods里使用，或者被用来为像controller一样的系统组件存储配置数据。虽然ConfigMap跟Secrets类似，但是ConfigMap更方便的处理不含敏感信息的字符串。 注意：ConfigMaps不是属性配置文件的替代品。ConfigMaps只是作为多个properties文件的引用。你可以把它理解为Linux系统中的/etc目录，专门用来存储配置文件的目录。下面举个例子，使用ConfigMap配置来创建Kuberntes Volumes，ConfigMap中的每个data项都会成为一个新文件。\n\n```\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  creationTimestamp: 2016-02-18T19:14:38Z\n  name: example-config\n  namespace: default\ndata:\n  example.property.1: hello\n  example.property.2: world\n  example.property.file: |-\n    property.1=value-1\n    property.2=value-2\n    property.3=value-3\n```\n\ndata一栏包括了配置数据，ConfigMap可以被用来保存单个属性，也可以用来保存一个配置文件。 配置数据可以通过很多种方式在Pods里被使用。ConfigMaps可以被用来：\n\n设置环境变量的值\n在容器里设置命令行参数\n在数据卷里面创建config文件\n用户和系统组件两者都可以在ConfigMap里面存储配置数据。\n\n其实不用看下面的文章，直接从kubectl create configmap -h的帮助信息中就可以对ConfigMap究竟如何创建略知一二了。\n\n```\nExamples:\n  # Create a new configmap named my-config based on folder bar\n  kubectl create configmap my-config --from-file=path/to/bar\n\n  # Create a new configmap named my-config with specified keys instead of file basenames on disk\n  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n  # Create a new configmap named my-config with key1=config1 and key2=config2\n  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n```\n\n## 创建ConfigMaps\n可以使用该命令，用给定值、文件或目录来创建ConfigMap。\n```\nkubectl create configmap\n```\n\n### 使用目录创建\n比如我们已经有个了包含一些配置文件，其中包含了我们想要设置的ConfigMap的值：\n```\n$ ls docs/user-guide/configmap/kubectl/\ngame.properties\nui.properties\n\n$ cat docs/user-guide/configmap/kubectl/game.properties\nenemies=aliens\nlives=3\nenemies.cheat=true\nenemies.cheat.level=noGoodRotten\nsecret.code.passphrase=UUDDLRLRBABAS\nsecret.code.allowed=true\nsecret.code.lives=30\n\n$ cat docs/user-guide/configmap/kubectl/ui.properties\ncolor.good=purple\ncolor.bad=yellow\nallow.textmode=true\nhow.nice.to.look=fairlyNice\n```\n使用下面的命令可以创建一个包含目录中所有文件的ConfigMap。\n\n```\n$ kubectl create configmap game-config --from-file=docs/user-guide/configmap/kubectl\n```\n—from-file指定在目录下的所有文件都会被用在ConfigMap里面创建一个键值对，键的名字就是文件名，值就是文件的内容。\n\n让我们来看一下这个命令创建的ConfigMap：\n```\n$ kubectl describe configmaps game-config\nName:           game-config\nNamespace:      default\nLabels:         <none>\nAnnotations:    <none>\n\nData\n====\ngame.properties:        158 bytes\nui.properties:          83 bytes\n```\n我们可以看到那两个key是从kubectl指定的目录中的文件名。这些key的内容可能会很大，所以在kubectl describe的输出中，只能够看到键的名字和他们的大小。 如果想要看到键的值的话，可以使用kubectl get：\n\n```\n$ kubectl get configmaps game-config -o yaml\n```\n### 使用文件创建\n刚才使用目录创建的时候我们—from-file指定的是一个目录，只要指定为一个文件就可以从单个文件中创建ConfigMap。\n\n```\n$ kubectl create configmap game-config-2 --from-file=docs/user-guide/configmap/kubectl/game.properties \n\n$ kubectl get configmaps game-config-2 -o yaml\n```\n—from-file这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的。\n\n### 使用字面值创建\n使用文字值创建，利用—from-literal参数传递配置信息，该参数可以使用多次，格式如下；\n\n```\n$ kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm\n\n$ kubectl get configmaps special-config -o yaml\n```\n\n## Pod中使用ConfigMap\n使用ConfigMap来替代环境变量\nConfigMap可以被用来填入环境变量。看下下面的ConfigMap。\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n```\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: env-config\n  namespace: default\ndata:\n  log_level: INFO\n```\n我们可以在Pod中这样使用ConfigMap：\n### 使用ConfigMap来替代环境变量\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: gcr.io/google_containers/busybox\n      command: [ \"/bin/sh\", \"-c\", \"env\" ]\n      env:\n        - name: SPECIAL_LEVEL_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.how\n        - name: SPECIAL_TYPE_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.type\n      envFrom:\n        - configMapRef:\n            name: env-config\n  restartPolicy: Never\n```\n这个Pod运行后会输出如下几行：\n```\nSPECIAL_LEVEL_KEY=very\nSPECIAL_TYPE_KEY=charm\nlog_level=INFO\n```\n### 用ConfigMap设置命令行参数\nConfigMap也可以被使用来设置容器中的命令或者参数值。它使用的是Kubernetes的$(VAR_NAME)替换语法。我们看下下面这个ConfigMap。\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n```\n为了将ConfigMap中的值注入到命令行的参数里面，我们还要像前面那个例子一样使用环境变量替换语法${VAR_NAME)。（其实这个东西就是给Docker容器设置环境变量，以前我创建镜像的时候经常这么玩，通过docker run的时候指定-e参数修改镜像里的环境变量，然后docker的CMD命令再利用该$(VAR_NAME)通过sed来修改配置文件或者作为命令行启动参数。）\n\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: gcr.io/google_containers/busybox\n      command: [ \"/bin/sh\", \"-c\", \"echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)\" ]\n      env:\n        - name: SPECIAL_LEVEL_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.how\n        - name: SPECIAL_TYPE_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.type\n  restartPolicy: Never\n```\n\n### 通过数据卷插件使用ConfigMap\n在数据卷里面使用这个ConfigMap，有不同的选项。最基本的就是将文件填入数据卷，在这个文件中，键就是文件名，键值就是文件内容：\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: gcr.io/google_containers/busybox\n      command: [ \"/bin/sh\", \"-c\", \"cat /etc/config/special.how\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: special-config\n  restartPolicy: Never\n```\n我们也可以在ConfigMap值被映射的数据卷里控制路径。\n使用前面创建的game-config\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: busybox\n      command: [ \"/bin/sh\",\"-c\",\"ls /etc/config\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: game-config\n  restartPolicy: Never\n```\n\n查看pod日志里面打印出/etc/config目录下的文件\n```\n$ kubectl logs dapi-test-pod test-container\n\ngame.properties\nui.properties\n```","slug":"kubernetes-configmap-usage","published":1,"updated":"2018-05-23T02:14:24.368Z","_id":"cjhigz1zw0004n8vrj93wfsgd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘自：<a href=\"https://jimmysong.io/kubernetes-handbook/concepts/configmap.html\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/kubernetes-handbook/concepts/configmap.html</a></p>\n<h2 id=\"ConfigMap\"><a href=\"#ConfigMap\" class=\"headerlink\" title=\"ConfigMap\"></a>ConfigMap</h2><p>其实ConfigMap功能在Kubernetes1.2版本的时候就有了，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。这些配置信息需要与docker image解耦，你总不能每修改一个配置就重做一个image吧？ConfigMap API给我们提供了向容器中注入配置信息的机制，ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制大对象。</p>\n<h2 id=\"ConfigMap概览\"><a href=\"#ConfigMap概览\" class=\"headerlink\" title=\"ConfigMap概览\"></a>ConfigMap概览</h2><p>ConfigMap API资源用来保存key-value pair配置数据，这个数据可以在pods里使用，或者被用来为像controller一样的系统组件存储配置数据。虽然ConfigMap跟Secrets类似，但是ConfigMap更方便的处理不含敏感信息的字符串。 注意：ConfigMaps不是属性配置文件的替代品。ConfigMaps只是作为多个properties文件的引用。你可以把它理解为Linux系统中的/etc目录，专门用来存储配置文件的目录。下面举个例子，使用ConfigMap配置来创建Kuberntes Volumes，ConfigMap中的每个data项都会成为一个新文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  creationTimestamp: 2016-02-18T19:14:38Z</span><br><span class=\"line\">  name: example-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  example.property.1: hello</span><br><span class=\"line\">  example.property.2: world</span><br><span class=\"line\">  example.property.file: |-</span><br><span class=\"line\">    property.1=value-1</span><br><span class=\"line\">    property.2=value-2</span><br><span class=\"line\">    property.3=value-3</span><br></pre></td></tr></table></figure>\n<p>data一栏包括了配置数据，ConfigMap可以被用来保存单个属性，也可以用来保存一个配置文件。 配置数据可以通过很多种方式在Pods里被使用。ConfigMaps可以被用来：</p>\n<p>设置环境变量的值<br>在容器里设置命令行参数<br>在数据卷里面创建config文件<br>用户和系统组件两者都可以在ConfigMap里面存储配置数据。</p>\n<p>其实不用看下面的文章，直接从kubectl create configmap -h的帮助信息中就可以对ConfigMap究竟如何创建略知一二了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Examples:</span><br><span class=\"line\">  # Create a new configmap named my-config based on folder bar</span><br><span class=\"line\">  kubectl create configmap my-config --from-file=path/to/bar</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a new configmap named my-config with specified keys instead of file basenames on disk</span><br><span class=\"line\">  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a new configmap named my-config with key1=config1 and key2=config2</span><br><span class=\"line\">  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建ConfigMaps\"><a href=\"#创建ConfigMaps\" class=\"headerlink\" title=\"创建ConfigMaps\"></a>创建ConfigMaps</h2><p>可以使用该命令，用给定值、文件或目录来创建ConfigMap。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用目录创建\"><a href=\"#使用目录创建\" class=\"headerlink\" title=\"使用目录创建\"></a>使用目录创建</h3><p>比如我们已经有个了包含一些配置文件，其中包含了我们想要设置的ConfigMap的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls docs/user-guide/configmap/kubectl/</span><br><span class=\"line\">game.properties</span><br><span class=\"line\">ui.properties</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat docs/user-guide/configmap/kubectl/game.properties</span><br><span class=\"line\">enemies=aliens</span><br><span class=\"line\">lives=3</span><br><span class=\"line\">enemies.cheat=true</span><br><span class=\"line\">enemies.cheat.level=noGoodRotten</span><br><span class=\"line\">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class=\"line\">secret.code.allowed=true</span><br><span class=\"line\">secret.code.lives=30</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat docs/user-guide/configmap/kubectl/ui.properties</span><br><span class=\"line\">color.good=purple</span><br><span class=\"line\">color.bad=yellow</span><br><span class=\"line\">allow.textmode=true</span><br><span class=\"line\">how.nice.to.look=fairlyNice</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的命令可以创建一个包含目录中所有文件的ConfigMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap game-config --from-file=docs/user-guide/configmap/kubectl</span><br></pre></td></tr></table></figure>\n<p>—from-file指定在目录下的所有文件都会被用在ConfigMap里面创建一个键值对，键的名字就是文件名，值就是文件的内容。</p>\n<p>让我们来看一下这个命令创建的ConfigMap：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe configmaps game-config</span><br><span class=\"line\">Name:           game-config</span><br><span class=\"line\">Namespace:      default</span><br><span class=\"line\">Labels:         &lt;none&gt;</span><br><span class=\"line\">Annotations:    &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">game.properties:        158 bytes</span><br><span class=\"line\">ui.properties:          83 bytes</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到那两个key是从kubectl指定的目录中的文件名。这些key的内容可能会很大，所以在kubectl describe的输出中，只能够看到键的名字和他们的大小。 如果想要看到键的值的话，可以使用kubectl get：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get configmaps game-config -o yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用文件创建\"><a href=\"#使用文件创建\" class=\"headerlink\" title=\"使用文件创建\"></a>使用文件创建</h3><p>刚才使用目录创建的时候我们—from-file指定的是一个目录，只要指定为一个文件就可以从单个文件中创建ConfigMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap game-config-2 --from-file=docs/user-guide/configmap/kubectl/game.properties </span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get configmaps game-config-2 -o yaml</span><br></pre></td></tr></table></figure>\n<p>—from-file这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的。</p>\n<h3 id=\"使用字面值创建\"><a href=\"#使用字面值创建\" class=\"headerlink\" title=\"使用字面值创建\"></a>使用字面值创建</h3><p>使用文字值创建，利用—from-literal参数传递配置信息，该参数可以使用多次，格式如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get configmaps special-config -o yaml</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pod中使用ConfigMap\"><a href=\"#Pod中使用ConfigMap\" class=\"headerlink\" title=\"Pod中使用ConfigMap\"></a>Pod中使用ConfigMap</h2><p>使用ConfigMap来替代环境变量<br>ConfigMap可以被用来填入环境变量。看下下面的ConfigMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: special-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  special.how: very</span><br><span class=\"line\">  special.type: charm</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: env-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  log_level: INFO</span><br></pre></td></tr></table></figure>\n<p>我们可以在Pod中这样使用ConfigMap：</p>\n<h3 id=\"使用ConfigMap来替代环境变量\"><a href=\"#使用ConfigMap来替代环境变量\" class=\"headerlink\" title=\"使用ConfigMap来替代环境变量\"></a>使用ConfigMap来替代环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: gcr.io/google_containers/busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;env&quot; ]</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        - name: SPECIAL_LEVEL_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.how</span><br><span class=\"line\">        - name: SPECIAL_TYPE_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.type</span><br><span class=\"line\">      envFrom:</span><br><span class=\"line\">        - configMapRef:</span><br><span class=\"line\">            name: env-config</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure>\n<p>这个Pod运行后会输出如下几行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPECIAL_LEVEL_KEY=very</span><br><span class=\"line\">SPECIAL_TYPE_KEY=charm</span><br><span class=\"line\">log_level=INFO</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用ConfigMap设置命令行参数\"><a href=\"#用ConfigMap设置命令行参数\" class=\"headerlink\" title=\"用ConfigMap设置命令行参数\"></a>用ConfigMap设置命令行参数</h3><p>ConfigMap也可以被使用来设置容器中的命令或者参数值。它使用的是Kubernetes的$(VAR_NAME)替换语法。我们看下下面这个ConfigMap。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: special-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  special.how: very</span><br><span class=\"line\">  special.type: charm</span><br></pre></td></tr></table></figure></p>\n<p>为了将ConfigMap中的值注入到命令行的参数里面，我们还要像前面那个例子一样使用环境变量替换语法${VAR_NAME)。（其实这个东西就是给Docker容器设置环境变量，以前我创建镜像的时候经常这么玩，通过docker run的时候指定-e参数修改镜像里的环境变量，然后docker的CMD命令再利用该$(VAR_NAME)通过sed来修改配置文件或者作为命令行启动参数。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: gcr.io/google_containers/busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)&quot; ]</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        - name: SPECIAL_LEVEL_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.how</span><br><span class=\"line\">        - name: SPECIAL_TYPE_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.type</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过数据卷插件使用ConfigMap\"><a href=\"#通过数据卷插件使用ConfigMap\" class=\"headerlink\" title=\"通过数据卷插件使用ConfigMap\"></a>通过数据卷插件使用ConfigMap</h3><p>在数据卷里面使用这个ConfigMap，有不同的选项。最基本的就是将文件填入数据卷，在这个文件中，键就是文件名，键值就是文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: gcr.io/google_containers/busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;cat /etc/config/special.how&quot; ]</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        mountPath: /etc/config</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: config-volume</span><br><span class=\"line\">      configMap:</span><br><span class=\"line\">        name: special-config</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure></p>\n<p>我们也可以在ConfigMap值被映射的数据卷里控制路径。<br>使用前面创建的game-config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;,&quot;-c&quot;,&quot;ls /etc/config&quot; ]</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        mountPath: /etc/config</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: config-volume</span><br><span class=\"line\">      configMap:</span><br><span class=\"line\">        name: game-config</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure></p>\n<p>查看pod日志里面打印出/etc/config目录下的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl logs dapi-test-pod test-container</span><br><span class=\"line\"></span><br><span class=\"line\">game.properties</span><br><span class=\"line\">ui.properties</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>摘自：<a href=\"https://jimmysong.io/kubernetes-handbook/concepts/configmap.html\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/kubernetes-handbook/concepts/configmap.html</a></p>\n<h2 id=\"ConfigMap\"><a href=\"#ConfigMap\" class=\"headerlink\" title=\"ConfigMap\"></a>ConfigMap</h2><p>其实ConfigMap功能在Kubernetes1.2版本的时候就有了，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。这些配置信息需要与docker image解耦，你总不能每修改一个配置就重做一个image吧？ConfigMap API给我们提供了向容器中注入配置信息的机制，ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制大对象。</p>\n<h2 id=\"ConfigMap概览\"><a href=\"#ConfigMap概览\" class=\"headerlink\" title=\"ConfigMap概览\"></a>ConfigMap概览</h2><p>ConfigMap API资源用来保存key-value pair配置数据，这个数据可以在pods里使用，或者被用来为像controller一样的系统组件存储配置数据。虽然ConfigMap跟Secrets类似，但是ConfigMap更方便的处理不含敏感信息的字符串。 注意：ConfigMaps不是属性配置文件的替代品。ConfigMaps只是作为多个properties文件的引用。你可以把它理解为Linux系统中的/etc目录，专门用来存储配置文件的目录。下面举个例子，使用ConfigMap配置来创建Kuberntes Volumes，ConfigMap中的每个data项都会成为一个新文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  creationTimestamp: 2016-02-18T19:14:38Z</span><br><span class=\"line\">  name: example-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  example.property.1: hello</span><br><span class=\"line\">  example.property.2: world</span><br><span class=\"line\">  example.property.file: |-</span><br><span class=\"line\">    property.1=value-1</span><br><span class=\"line\">    property.2=value-2</span><br><span class=\"line\">    property.3=value-3</span><br></pre></td></tr></table></figure>\n<p>data一栏包括了配置数据，ConfigMap可以被用来保存单个属性，也可以用来保存一个配置文件。 配置数据可以通过很多种方式在Pods里被使用。ConfigMaps可以被用来：</p>\n<p>设置环境变量的值<br>在容器里设置命令行参数<br>在数据卷里面创建config文件<br>用户和系统组件两者都可以在ConfigMap里面存储配置数据。</p>\n<p>其实不用看下面的文章，直接从kubectl create configmap -h的帮助信息中就可以对ConfigMap究竟如何创建略知一二了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Examples:</span><br><span class=\"line\">  # Create a new configmap named my-config based on folder bar</span><br><span class=\"line\">  kubectl create configmap my-config --from-file=path/to/bar</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a new configmap named my-config with specified keys instead of file basenames on disk</span><br><span class=\"line\">  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a new configmap named my-config with key1=config1 and key2=config2</span><br><span class=\"line\">  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建ConfigMaps\"><a href=\"#创建ConfigMaps\" class=\"headerlink\" title=\"创建ConfigMaps\"></a>创建ConfigMaps</h2><p>可以使用该命令，用给定值、文件或目录来创建ConfigMap。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用目录创建\"><a href=\"#使用目录创建\" class=\"headerlink\" title=\"使用目录创建\"></a>使用目录创建</h3><p>比如我们已经有个了包含一些配置文件，其中包含了我们想要设置的ConfigMap的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls docs/user-guide/configmap/kubectl/</span><br><span class=\"line\">game.properties</span><br><span class=\"line\">ui.properties</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat docs/user-guide/configmap/kubectl/game.properties</span><br><span class=\"line\">enemies=aliens</span><br><span class=\"line\">lives=3</span><br><span class=\"line\">enemies.cheat=true</span><br><span class=\"line\">enemies.cheat.level=noGoodRotten</span><br><span class=\"line\">secret.code.passphrase=UUDDLRLRBABAS</span><br><span class=\"line\">secret.code.allowed=true</span><br><span class=\"line\">secret.code.lives=30</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat docs/user-guide/configmap/kubectl/ui.properties</span><br><span class=\"line\">color.good=purple</span><br><span class=\"line\">color.bad=yellow</span><br><span class=\"line\">allow.textmode=true</span><br><span class=\"line\">how.nice.to.look=fairlyNice</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的命令可以创建一个包含目录中所有文件的ConfigMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap game-config --from-file=docs/user-guide/configmap/kubectl</span><br></pre></td></tr></table></figure>\n<p>—from-file指定在目录下的所有文件都会被用在ConfigMap里面创建一个键值对，键的名字就是文件名，值就是文件的内容。</p>\n<p>让我们来看一下这个命令创建的ConfigMap：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe configmaps game-config</span><br><span class=\"line\">Name:           game-config</span><br><span class=\"line\">Namespace:      default</span><br><span class=\"line\">Labels:         &lt;none&gt;</span><br><span class=\"line\">Annotations:    &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">game.properties:        158 bytes</span><br><span class=\"line\">ui.properties:          83 bytes</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到那两个key是从kubectl指定的目录中的文件名。这些key的内容可能会很大，所以在kubectl describe的输出中，只能够看到键的名字和他们的大小。 如果想要看到键的值的话，可以使用kubectl get：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get configmaps game-config -o yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用文件创建\"><a href=\"#使用文件创建\" class=\"headerlink\" title=\"使用文件创建\"></a>使用文件创建</h3><p>刚才使用目录创建的时候我们—from-file指定的是一个目录，只要指定为一个文件就可以从单个文件中创建ConfigMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap game-config-2 --from-file=docs/user-guide/configmap/kubectl/game.properties </span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get configmaps game-config-2 -o yaml</span><br></pre></td></tr></table></figure>\n<p>—from-file这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的。</p>\n<h3 id=\"使用字面值创建\"><a href=\"#使用字面值创建\" class=\"headerlink\" title=\"使用字面值创建\"></a>使用字面值创建</h3><p>使用文字值创建，利用—from-literal参数传递配置信息，该参数可以使用多次，格式如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get configmaps special-config -o yaml</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pod中使用ConfigMap\"><a href=\"#Pod中使用ConfigMap\" class=\"headerlink\" title=\"Pod中使用ConfigMap\"></a>Pod中使用ConfigMap</h2><p>使用ConfigMap来替代环境变量<br>ConfigMap可以被用来填入环境变量。看下下面的ConfigMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: special-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  special.how: very</span><br><span class=\"line\">  special.type: charm</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: env-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  log_level: INFO</span><br></pre></td></tr></table></figure>\n<p>我们可以在Pod中这样使用ConfigMap：</p>\n<h3 id=\"使用ConfigMap来替代环境变量\"><a href=\"#使用ConfigMap来替代环境变量\" class=\"headerlink\" title=\"使用ConfigMap来替代环境变量\"></a>使用ConfigMap来替代环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: gcr.io/google_containers/busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;env&quot; ]</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        - name: SPECIAL_LEVEL_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.how</span><br><span class=\"line\">        - name: SPECIAL_TYPE_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.type</span><br><span class=\"line\">      envFrom:</span><br><span class=\"line\">        - configMapRef:</span><br><span class=\"line\">            name: env-config</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure>\n<p>这个Pod运行后会输出如下几行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPECIAL_LEVEL_KEY=very</span><br><span class=\"line\">SPECIAL_TYPE_KEY=charm</span><br><span class=\"line\">log_level=INFO</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用ConfigMap设置命令行参数\"><a href=\"#用ConfigMap设置命令行参数\" class=\"headerlink\" title=\"用ConfigMap设置命令行参数\"></a>用ConfigMap设置命令行参数</h3><p>ConfigMap也可以被使用来设置容器中的命令或者参数值。它使用的是Kubernetes的$(VAR_NAME)替换语法。我们看下下面这个ConfigMap。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: special-config</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">data:</span><br><span class=\"line\">  special.how: very</span><br><span class=\"line\">  special.type: charm</span><br></pre></td></tr></table></figure></p>\n<p>为了将ConfigMap中的值注入到命令行的参数里面，我们还要像前面那个例子一样使用环境变量替换语法${VAR_NAME)。（其实这个东西就是给Docker容器设置环境变量，以前我创建镜像的时候经常这么玩，通过docker run的时候指定-e参数修改镜像里的环境变量，然后docker的CMD命令再利用该$(VAR_NAME)通过sed来修改配置文件或者作为命令行启动参数。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: gcr.io/google_containers/busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)&quot; ]</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        - name: SPECIAL_LEVEL_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.how</span><br><span class=\"line\">        - name: SPECIAL_TYPE_KEY</span><br><span class=\"line\">          valueFrom:</span><br><span class=\"line\">            configMapKeyRef:</span><br><span class=\"line\">              name: special-config</span><br><span class=\"line\">              key: special.type</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过数据卷插件使用ConfigMap\"><a href=\"#通过数据卷插件使用ConfigMap\" class=\"headerlink\" title=\"通过数据卷插件使用ConfigMap\"></a>通过数据卷插件使用ConfigMap</h3><p>在数据卷里面使用这个ConfigMap，有不同的选项。最基本的就是将文件填入数据卷，在这个文件中，键就是文件名，键值就是文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: gcr.io/google_containers/busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;cat /etc/config/special.how&quot; ]</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        mountPath: /etc/config</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: config-volume</span><br><span class=\"line\">      configMap:</span><br><span class=\"line\">        name: special-config</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure></p>\n<p>我们也可以在ConfigMap值被映射的数据卷里控制路径。<br>使用前面创建的game-config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dapi-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: busybox</span><br><span class=\"line\">      command: [ &quot;/bin/sh&quot;,&quot;-c&quot;,&quot;ls /etc/config&quot; ]</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        mountPath: /etc/config</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: config-volume</span><br><span class=\"line\">      configMap:</span><br><span class=\"line\">        name: game-config</span><br><span class=\"line\">  restartPolicy: Never</span><br></pre></td></tr></table></figure></p>\n<p>查看pod日志里面打印出/etc/config目录下的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl logs dapi-test-pod test-container</span><br><span class=\"line\"></span><br><span class=\"line\">game.properties</span><br><span class=\"line\">ui.properties</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Kubernetes Java Client使用","date":"2018-03-28T16:00:00.000Z","_content":"## 前言\n使用Kubernetes 加Jenkins CICD，那么问题来了，Jenkins里面怎么部署Kubernetes应用呢。曾经在Jenkins上搜索过几个插件，其中Kubernetes Continuous Deploy没搞懂怎么用，咨询了一技术哥们说：本质就是配置认证， 调用k8s接口实现。在他的指点下，使用Kubernetes client去调用Kubernetes接口z\nk8s java client github地址：https://github.com/kubernetes-client/java。\n\n\n下面使用springboot + k8s client搭建的一个k8s-api项目\n\n## 创建接口调用token\n使用RBAC（基于角色的访问控制)调用接口，关于RBAC阅读以下文档\n官网文档：https://v1-8.docs.kubernetes.io/docs/admin/authorization/rbac/\n中文翻译文档：https://jimmysong.io/kubernetes-handbook/concepts/rbac.html\n\n首先创建一个ServiceAccount，再绑定ClusterRole角色的cluster-admin权限，获得token，备client调接口用。\ndeployuser-token.yaml文件\n```\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n name: deploy-user\n annotations:\n  rbac.authorization.kubernetes.io/autoupdate: \"true\"\nroleRef:\n kind: ClusterRole\n name: cluster-admin\n apiGroup: rbac.authorization.k8s.io\nsubjects:\n - kind: ServiceAccount\n   name: deploy-user\n   namespace: kube-system\n   \n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: deploy-user\n namespace: kube-system\n labels:\n  kubernetes.io/cluster-service: \"true\"\n  addonmanager.kubernetes.io/mode: Reconcile\n```\n\n```\n$ kubectl apply -f cat deployuser-token.yaml\n```\n\n查看用户秘钥\n```\n$ kubectl get secret -n kube-system|grep deploy-user\nNAME                                     TYPE                                  DATA      AGE\ndeploy-user-token-5g6w6                  kubernetes.io/service-account-token   3         1d\n```\n\n#查看deploy-user账户秘钥详情\n```\n$ kubectl describe secret deploy-user-token-5g6w6  -n kube-system\n\nName:         deploy-user-token-5g6w6\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name=deploy-user\n              kubernetes.io/service-account.uid=0de0540e-2b24-11e8-841c-080027381e88\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:  TOKEN\n```\n\n## 新建一个Maven project\npom.xml文件\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>org.kevin</groupId>\n\t<artifactId>k8s-api</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>k8s-api</name>\n\t<url>http://maven.apache.org</url>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\t<parent>\n\t    <groupId>org.springframework.boot</groupId>\n\t    <artifactId>spring-boot-starter-parent</artifactId>\n\t    <version>1.5.10.RELEASE</version>\n\t</parent>\n \n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>io.kubernetes</groupId>\n\t\t\t<artifactId>client-java</artifactId>\n\t\t\t<version>1.0.0-beta1</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t        <groupId>org.springframework.boot</groupId>\n\t        <artifactId>spring-boot-starter-web</artifactId>\n\t    </dependency>\n\t</dependencies>\n\t\n\t<build>\n\t\t<finalName>app</finalName>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**/*</include>\n\t\t\t\t\t<include>**/*/*</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\t\t</resources>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.7</source>\n\t\t\t\t\t<target>1.7</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n\n```\n重点在\n```\n\t\t<dependency>\n\t\t\t<groupId>io.kubernetes</groupId>\n\t\t\t<artifactId>client-java</artifactId>\n\t\t\t<version>1.0.0-beta1</version>\n\t\t</dependency>\n```\n因为集群是k8s 1.8的，client需要使用1.0.0-beta1版本\n\n### 配置\n新建application.properties配置以下内容\n```\nserver.port=8089\n\n#deploy-user的token，可以配置在配置文件，也可以在声明pod的设置env引用secret\n#token=TOKEN\n```\n\n### springboot启动类\nspringboot启动类，包括初始化ApiClient。\nKUBERNETES_SERVICE_HOST 使用k8s部署后pod的env环境变量，k8s apiserver地址\nKUBERNETES_SERVICE_PORT k8s apiserver端口\ntoken 是调接口凭证。\n```\n@SpringBootApplication\npublic class App {\n\tpublic static void main(String[] args) throws IOException, ApiException {\n\t\tSpringApplication.run(App.class, args);\n\t}\n\t\n\t@Value(\"${KUBERNETES_SERVICE_HOST}\")\n\tprivate String host;\n\t@Value(\"${KUBERNETES_SERVICE_PORT}\")\n\tprivate String port;\n\t@Value(\"${token}\")\n\tprivate String token;\n\t\n\t@Bean\n\tpublic ApiClient getClient() {\n\t\ttry {\n\t\t\tApiClient client = new ApiClient();\n\t\t\tclient.setBasePath(\"https://\" + host + \":\" + port);\n\t\t\tclient.setApiKeyPrefix(\"bearer\");\n\t\t\tclient.setApiKey(token);\n\t\t\t//忽略ssl验证，不然java会报错。\n\t\t\tclient.setVerifyingSsl(false);\n\t\t\tConfiguration.setDefaultApiClient(client);\n\t\t\treturn client;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"初始化ApiClient错误\");\n\t\t\tSystem.exit(1);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n```\n\n### 使用client调用k8s api\n详细API接口文档：https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md\nController.java\n```\n@RestController\npublic class Controller {\n\n\t@RequestMapping(method = RequestMethod.GET, path = \"list_pod_for_all_namespace\")\n\t@ResponseBody\n\tpublic RespObject listPod() {\n\t\tCoreV1Api api = new CoreV1Api();\n\t\tV1PodList list;\n\t\ttry {\n\t\t\tlist = api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);\n\t\t\tList<String> names = new ArrayList<>();\n\t\t\tfor (V1Pod item : list.getItems()) {\n\t\t\t\tnames.add(item.getMetadata().getName());\n\t\t\t}\n\t\t\treturn new RespObject(names);\n\t\t} catch (ApiException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn new RespObject(e.getMessage(), 1);\n\t\t}\n\t}\n}\n```\n\nRespObject.java\n```\npublic class RespObject {\n\tprivate Object result;\n\tprivate int code;\n\t\n\tpublic RespObject(Object res) {\n\t\tthis.code = 0;\n\t\tthis.result = res;\n\t}\n\t\n\tpublic RespObject(Object res, int code) {\n\t\tthis.code = code;\n\t\tthis.result = res;\n\t}\n\n\tpublic Object getResult() {\n\t\treturn result;\n\t}\n\n\tpublic void setResult(Object result) {\n\t\tthis.result = result;\n\t}\n\n\tpublic int getCode() {\n\t\treturn code;\n\t}\n\n\tpublic void setCode(int code) {\n\t\tthis.code = code;\n\t}\n}\n```\n\n## 编译、部署到k8s\n\n### 制作docker镜像\nk8s-api.dockerfile文件\n```\nFROM java:8-jre-alpine\nWORKDIR /opt/\nCOPY app.jar /opt/app.jar\nCMD [\"/bin/sh\", \"-c\", \"java -jar app.jar\"]\n```\n```\n$ docker build -t k8s-api-demo -f k8s-api.dockerfile .\n```\n\n### 部署到k8s\n至此Java代码差不多了，打成jar包，docker build成镜像，用k8s部署，最后测试下\n\nk8s-api.yaml文件\n```\n---\nkind: Deployment\napiVersion: apps/v1beta2\nmetadata:\n name: k8s-api-demo\n labels:\n  app: k8s-api-demo\n namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-api-demo\n  template:\n    metadata:\n      labels:\n        app: k8s-api-demo\n    spec:\n      containers:\n      - name: k8s-api-demo\n        image: k8s-api-demo\n        #配置env\n        env: \n        - name: token\n          valueFrom: \n            #token的值引用自secret\n            secretKeyRef: \n              # 通过kubectl get secret -n kube-system|grep deploy-user 得到名称\n              name: deploy-user-token-5g6w6\n              key: token\n              \n---\nkind: Service\napiVersion: v1\nmetadata:\n name: k8s-api-demo\n labels:\n  app: k8s-api-demo\n namespace: kube-system\nspec:\n ports:\n - port: 8099\n   targetPort: 8089\n   nodePort: 32180\n selector:\n  app: k8s-api-demo\n type: NodePort \n\n```\n\n```\n$ kubectl apply -f k8s-api.yaml\n$ kubectl get svc -o wide -n kube-system |grep k8s-api-demo\nNAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE       SELECTOR\nk8s-api-demo       NodePort    10.100.62.191    <none>        8099:32180/TCP      1d        app=k8s-api-demo\n```\n\n通过访问master/node:32180端口即可访问到该项目\n访问http://master/node:32180/list_pod_for_all_namespace\n就可以返回所有namespace的pod name列表，结果如下：\n```\n{\n    \"result\": [\n        \"jenkins-74bbcdfd9-84hbr\",\n        \"adminserver-7c8c47cb95-ljf6z\",\n        \"dapi-test-pod\",\n        \"jobservice-7d584c99fb-2g2xq\",\n        \"k8s-api-6ccdbcb947-k6cwm\",\n        \"mysql-c87996b55-dhnjl\",\n        \"nfs-7b689fb468-p8pfm\",\n        \"nginx-75f4785b7-2t4kr\",\n        \"registry-c5f6f84dd-kk46k\",\n        \"ui-78599c46-8xpx5\",\n        \"calico-etcd-68mzw\",\n        \"calico-kube-controllers-6ff88bf6d4-57bqw\",\n        \"calico-node-6q2r7\",\n        \"calico-node-dx6cm\",\n        \"default-http-backend-n9st8\",\n        \"etcd-ubuntu-k8s\",\n        \"kube-apiserver-ubuntu-k8s\",\n        \"kube-controller-manager-ubuntu-k8s\",\n        \"kube-dns-545bc4bfd4-bgzg8\",\n        \"kube-proxy-77rlm\",\n        \"kube-proxy-nffh7\",\n        \"kube-scheduler-ubuntu-k8s\",\n        \"kubernetes-dashboard-76894548fd-kkhrj\",\n        \"nginx-ingress-controller-4kkph\",\n        \"nginx-ingress-controller-h9cpd\",\n        \"nginx-75f4785b7-lq4p7\",\n        \"nginx-75f4785b7-qt5sx\",\n        \"nginx-75f4785b7-v4lxg\"\n    ],\n    \"code\": 0\n}\n```\n\n## 在jenkins里面使用\n可以用pipeline用HttpRequest调用\n```\ndef resp;\ndef url = \"http://192.168.10.93:32180/list_pod_for_all_namespace\"\ntry {\n    resp = httpRequest httpMode: 'GET', url: \"$url\"\n    println resp.result\n}catch(e){\n}\n\n```\n\n文章Java代码：https://github.com/dongamp1990/k8s-api-demo.git","source":"_posts/kubernetes-java-client.md","raw":"---\ntitle: Kubernetes Java Client使用\ntags: [kubernetes]\ndate: 2018-03-29\n---\n## 前言\n使用Kubernetes 加Jenkins CICD，那么问题来了，Jenkins里面怎么部署Kubernetes应用呢。曾经在Jenkins上搜索过几个插件，其中Kubernetes Continuous Deploy没搞懂怎么用，咨询了一技术哥们说：本质就是配置认证， 调用k8s接口实现。在他的指点下，使用Kubernetes client去调用Kubernetes接口z\nk8s java client github地址：https://github.com/kubernetes-client/java。\n\n\n下面使用springboot + k8s client搭建的一个k8s-api项目\n\n## 创建接口调用token\n使用RBAC（基于角色的访问控制)调用接口，关于RBAC阅读以下文档\n官网文档：https://v1-8.docs.kubernetes.io/docs/admin/authorization/rbac/\n中文翻译文档：https://jimmysong.io/kubernetes-handbook/concepts/rbac.html\n\n首先创建一个ServiceAccount，再绑定ClusterRole角色的cluster-admin权限，获得token，备client调接口用。\ndeployuser-token.yaml文件\n```\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n name: deploy-user\n annotations:\n  rbac.authorization.kubernetes.io/autoupdate: \"true\"\nroleRef:\n kind: ClusterRole\n name: cluster-admin\n apiGroup: rbac.authorization.k8s.io\nsubjects:\n - kind: ServiceAccount\n   name: deploy-user\n   namespace: kube-system\n   \n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: deploy-user\n namespace: kube-system\n labels:\n  kubernetes.io/cluster-service: \"true\"\n  addonmanager.kubernetes.io/mode: Reconcile\n```\n\n```\n$ kubectl apply -f cat deployuser-token.yaml\n```\n\n查看用户秘钥\n```\n$ kubectl get secret -n kube-system|grep deploy-user\nNAME                                     TYPE                                  DATA      AGE\ndeploy-user-token-5g6w6                  kubernetes.io/service-account-token   3         1d\n```\n\n#查看deploy-user账户秘钥详情\n```\n$ kubectl describe secret deploy-user-token-5g6w6  -n kube-system\n\nName:         deploy-user-token-5g6w6\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name=deploy-user\n              kubernetes.io/service-account.uid=0de0540e-2b24-11e8-841c-080027381e88\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:  TOKEN\n```\n\n## 新建一个Maven project\npom.xml文件\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>org.kevin</groupId>\n\t<artifactId>k8s-api</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>k8s-api</name>\n\t<url>http://maven.apache.org</url>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\t<parent>\n\t    <groupId>org.springframework.boot</groupId>\n\t    <artifactId>spring-boot-starter-parent</artifactId>\n\t    <version>1.5.10.RELEASE</version>\n\t</parent>\n \n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>io.kubernetes</groupId>\n\t\t\t<artifactId>client-java</artifactId>\n\t\t\t<version>1.0.0-beta1</version>\n\t\t</dependency>\n\t\t\n\t\t<dependency>\n\t        <groupId>org.springframework.boot</groupId>\n\t        <artifactId>spring-boot-starter-web</artifactId>\n\t    </dependency>\n\t</dependencies>\n\t\n\t<build>\n\t\t<finalName>app</finalName>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**/*</include>\n\t\t\t\t\t<include>**/*/*</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\t\t</resources>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.7</source>\n\t\t\t\t\t<target>1.7</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n\n```\n重点在\n```\n\t\t<dependency>\n\t\t\t<groupId>io.kubernetes</groupId>\n\t\t\t<artifactId>client-java</artifactId>\n\t\t\t<version>1.0.0-beta1</version>\n\t\t</dependency>\n```\n因为集群是k8s 1.8的，client需要使用1.0.0-beta1版本\n\n### 配置\n新建application.properties配置以下内容\n```\nserver.port=8089\n\n#deploy-user的token，可以配置在配置文件，也可以在声明pod的设置env引用secret\n#token=TOKEN\n```\n\n### springboot启动类\nspringboot启动类，包括初始化ApiClient。\nKUBERNETES_SERVICE_HOST 使用k8s部署后pod的env环境变量，k8s apiserver地址\nKUBERNETES_SERVICE_PORT k8s apiserver端口\ntoken 是调接口凭证。\n```\n@SpringBootApplication\npublic class App {\n\tpublic static void main(String[] args) throws IOException, ApiException {\n\t\tSpringApplication.run(App.class, args);\n\t}\n\t\n\t@Value(\"${KUBERNETES_SERVICE_HOST}\")\n\tprivate String host;\n\t@Value(\"${KUBERNETES_SERVICE_PORT}\")\n\tprivate String port;\n\t@Value(\"${token}\")\n\tprivate String token;\n\t\n\t@Bean\n\tpublic ApiClient getClient() {\n\t\ttry {\n\t\t\tApiClient client = new ApiClient();\n\t\t\tclient.setBasePath(\"https://\" + host + \":\" + port);\n\t\t\tclient.setApiKeyPrefix(\"bearer\");\n\t\t\tclient.setApiKey(token);\n\t\t\t//忽略ssl验证，不然java会报错。\n\t\t\tclient.setVerifyingSsl(false);\n\t\t\tConfiguration.setDefaultApiClient(client);\n\t\t\treturn client;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"初始化ApiClient错误\");\n\t\t\tSystem.exit(1);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n```\n\n### 使用client调用k8s api\n详细API接口文档：https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md\nController.java\n```\n@RestController\npublic class Controller {\n\n\t@RequestMapping(method = RequestMethod.GET, path = \"list_pod_for_all_namespace\")\n\t@ResponseBody\n\tpublic RespObject listPod() {\n\t\tCoreV1Api api = new CoreV1Api();\n\t\tV1PodList list;\n\t\ttry {\n\t\t\tlist = api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);\n\t\t\tList<String> names = new ArrayList<>();\n\t\t\tfor (V1Pod item : list.getItems()) {\n\t\t\t\tnames.add(item.getMetadata().getName());\n\t\t\t}\n\t\t\treturn new RespObject(names);\n\t\t} catch (ApiException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn new RespObject(e.getMessage(), 1);\n\t\t}\n\t}\n}\n```\n\nRespObject.java\n```\npublic class RespObject {\n\tprivate Object result;\n\tprivate int code;\n\t\n\tpublic RespObject(Object res) {\n\t\tthis.code = 0;\n\t\tthis.result = res;\n\t}\n\t\n\tpublic RespObject(Object res, int code) {\n\t\tthis.code = code;\n\t\tthis.result = res;\n\t}\n\n\tpublic Object getResult() {\n\t\treturn result;\n\t}\n\n\tpublic void setResult(Object result) {\n\t\tthis.result = result;\n\t}\n\n\tpublic int getCode() {\n\t\treturn code;\n\t}\n\n\tpublic void setCode(int code) {\n\t\tthis.code = code;\n\t}\n}\n```\n\n## 编译、部署到k8s\n\n### 制作docker镜像\nk8s-api.dockerfile文件\n```\nFROM java:8-jre-alpine\nWORKDIR /opt/\nCOPY app.jar /opt/app.jar\nCMD [\"/bin/sh\", \"-c\", \"java -jar app.jar\"]\n```\n```\n$ docker build -t k8s-api-demo -f k8s-api.dockerfile .\n```\n\n### 部署到k8s\n至此Java代码差不多了，打成jar包，docker build成镜像，用k8s部署，最后测试下\n\nk8s-api.yaml文件\n```\n---\nkind: Deployment\napiVersion: apps/v1beta2\nmetadata:\n name: k8s-api-demo\n labels:\n  app: k8s-api-demo\n namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-api-demo\n  template:\n    metadata:\n      labels:\n        app: k8s-api-demo\n    spec:\n      containers:\n      - name: k8s-api-demo\n        image: k8s-api-demo\n        #配置env\n        env: \n        - name: token\n          valueFrom: \n            #token的值引用自secret\n            secretKeyRef: \n              # 通过kubectl get secret -n kube-system|grep deploy-user 得到名称\n              name: deploy-user-token-5g6w6\n              key: token\n              \n---\nkind: Service\napiVersion: v1\nmetadata:\n name: k8s-api-demo\n labels:\n  app: k8s-api-demo\n namespace: kube-system\nspec:\n ports:\n - port: 8099\n   targetPort: 8089\n   nodePort: 32180\n selector:\n  app: k8s-api-demo\n type: NodePort \n\n```\n\n```\n$ kubectl apply -f k8s-api.yaml\n$ kubectl get svc -o wide -n kube-system |grep k8s-api-demo\nNAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE       SELECTOR\nk8s-api-demo       NodePort    10.100.62.191    <none>        8099:32180/TCP      1d        app=k8s-api-demo\n```\n\n通过访问master/node:32180端口即可访问到该项目\n访问http://master/node:32180/list_pod_for_all_namespace\n就可以返回所有namespace的pod name列表，结果如下：\n```\n{\n    \"result\": [\n        \"jenkins-74bbcdfd9-84hbr\",\n        \"adminserver-7c8c47cb95-ljf6z\",\n        \"dapi-test-pod\",\n        \"jobservice-7d584c99fb-2g2xq\",\n        \"k8s-api-6ccdbcb947-k6cwm\",\n        \"mysql-c87996b55-dhnjl\",\n        \"nfs-7b689fb468-p8pfm\",\n        \"nginx-75f4785b7-2t4kr\",\n        \"registry-c5f6f84dd-kk46k\",\n        \"ui-78599c46-8xpx5\",\n        \"calico-etcd-68mzw\",\n        \"calico-kube-controllers-6ff88bf6d4-57bqw\",\n        \"calico-node-6q2r7\",\n        \"calico-node-dx6cm\",\n        \"default-http-backend-n9st8\",\n        \"etcd-ubuntu-k8s\",\n        \"kube-apiserver-ubuntu-k8s\",\n        \"kube-controller-manager-ubuntu-k8s\",\n        \"kube-dns-545bc4bfd4-bgzg8\",\n        \"kube-proxy-77rlm\",\n        \"kube-proxy-nffh7\",\n        \"kube-scheduler-ubuntu-k8s\",\n        \"kubernetes-dashboard-76894548fd-kkhrj\",\n        \"nginx-ingress-controller-4kkph\",\n        \"nginx-ingress-controller-h9cpd\",\n        \"nginx-75f4785b7-lq4p7\",\n        \"nginx-75f4785b7-qt5sx\",\n        \"nginx-75f4785b7-v4lxg\"\n    ],\n    \"code\": 0\n}\n```\n\n## 在jenkins里面使用\n可以用pipeline用HttpRequest调用\n```\ndef resp;\ndef url = \"http://192.168.10.93:32180/list_pod_for_all_namespace\"\ntry {\n    resp = httpRequest httpMode: 'GET', url: \"$url\"\n    println resp.result\n}catch(e){\n}\n\n```\n\n文章Java代码：https://github.com/dongamp1990/k8s-api-demo.git","slug":"kubernetes-java-client","published":1,"updated":"2018-05-23T02:11:01.361Z","_id":"cjhigz1zx0005n8vrnut1v7yv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Kubernetes 加Jenkins CICD，那么问题来了，Jenkins里面怎么部署Kubernetes应用呢。曾经在Jenkins上搜索过几个插件，其中Kubernetes Continuous Deploy没搞懂怎么用，咨询了一技术哥们说：本质就是配置认证， 调用k8s接口实现。在他的指点下，使用Kubernetes client去调用Kubernetes接口z<br>k8s java client github地址：<a href=\"https://github.com/kubernetes-client/java。\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes-client/java。</a></p>\n<p>下面使用springboot + k8s client搭建的一个k8s-api项目</p>\n<h2 id=\"创建接口调用token\"><a href=\"#创建接口调用token\" class=\"headerlink\" title=\"创建接口调用token\"></a>创建接口调用token</h2><p>使用RBAC（基于角色的访问控制)调用接口，关于RBAC阅读以下文档<br>官网文档：<a href=\"https://v1-8.docs.kubernetes.io/docs/admin/authorization/rbac/\" target=\"_blank\" rel=\"noopener\">https://v1-8.docs.kubernetes.io/docs/admin/authorization/rbac/</a><br>中文翻译文档：<a href=\"https://jimmysong.io/kubernetes-handbook/concepts/rbac.html\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/kubernetes-handbook/concepts/rbac.html</a></p>\n<p>首先创建一个ServiceAccount，再绑定ClusterRole角色的cluster-admin权限，获得token，备client调接口用。<br>deployuser-token.yaml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: deploy-user</span><br><span class=\"line\"> annotations:</span><br><span class=\"line\">  rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\"> kind: ClusterRole</span><br><span class=\"line\"> name: cluster-admin</span><br><span class=\"line\"> apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">subjects:</span><br><span class=\"line\"> - kind: ServiceAccount</span><br><span class=\"line\">   name: deploy-user</span><br><span class=\"line\">   namespace: kube-system</span><br><span class=\"line\">   </span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: deploy-user</span><br><span class=\"line\"> namespace: kube-system</span><br><span class=\"line\"> labels:</span><br><span class=\"line\">  kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">  addonmanager.kubernetes.io/mode: Reconcile</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f cat deployuser-token.yaml</span><br></pre></td></tr></table></figure>\n<p>查看用户秘钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get secret -n kube-system|grep deploy-user</span><br><span class=\"line\">NAME                                     TYPE                                  DATA      AGE</span><br><span class=\"line\">deploy-user-token-5g6w6                  kubernetes.io/service-account-token   3         1d</span><br></pre></td></tr></table></figure></p>\n<p>#查看deploy-user账户秘钥详情<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe secret deploy-user-token-5g6w6  -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         deploy-user-token-5g6w6</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name=deploy-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid=0de0540e-2b24-11e8-841c-080027381e88</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:  TOKEN</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"新建一个Maven-project\"><a href=\"#新建一个Maven-project\" class=\"headerlink\" title=\"新建一个Maven project\"></a>新建一个Maven project</h2><p>pom.xml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;groupId&gt;org.kevin&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;k8s-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;name&gt;k8s-api&lt;/name&gt;</span><br><span class=\"line\">\t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">\t&lt;/properties&gt;</span><br><span class=\"line\">\t&lt;parent&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">\t    &lt;version&gt;1.5.10.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/parent&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;io.kubernetes&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;client-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.0.0-beta1&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t    &lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;build&gt;</span><br><span class=\"line\">\t\t&lt;finalName&gt;app&lt;/finalName&gt;</span><br><span class=\"line\">\t\t&lt;resources&gt;</span><br><span class=\"line\">\t\t\t&lt;resource&gt;</span><br><span class=\"line\">\t\t\t\t&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">\t\t\t\t&lt;includes&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;include&gt;**/*&lt;/include&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;include&gt;**/*/*&lt;/include&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/includes&gt;</span><br><span class=\"line\">\t\t\t&lt;/resource&gt;</span><br><span class=\"line\">\t\t&lt;/resources&gt;</span><br><span class=\"line\">\t\t&lt;plugins&gt;</span><br><span class=\"line\">\t\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;source&gt;1.7&lt;/source&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;target&gt;1.7&lt;/target&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">\t\t\t&lt;/plugin&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;/plugin&gt;</span><br><span class=\"line\">\t\t&lt;/plugins&gt;</span><br><span class=\"line\">\t&lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n<p>重点在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.kubernetes&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;client-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.0.0-beta1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>因为集群是k8s 1.8的，client需要使用1.0.0-beta1版本</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>新建application.properties配置以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8089</span><br><span class=\"line\"></span><br><span class=\"line\">#deploy-user的token，可以配置在配置文件，也可以在声明pod的设置env引用secret</span><br><span class=\"line\">#token=TOKEN</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"springboot启动类\"><a href=\"#springboot启动类\" class=\"headerlink\" title=\"springboot启动类\"></a>springboot启动类</h3><p>springboot启动类，包括初始化ApiClient。<br>KUBERNETES_SERVICE_HOST 使用k8s部署后pod的env环境变量，k8s apiserver地址<br>KUBERNETES_SERVICE_PORT k8s apiserver端口<br>token 是调接口凭证。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws IOException, ApiException &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(App.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Value(&quot;$&#123;KUBERNETES_SERVICE_HOST&#125;&quot;)</span><br><span class=\"line\">\tprivate String host;</span><br><span class=\"line\">\t@Value(&quot;$&#123;KUBERNETES_SERVICE_PORT&#125;&quot;)</span><br><span class=\"line\">\tprivate String port;</span><br><span class=\"line\">\t@Value(&quot;$&#123;token&#125;&quot;)</span><br><span class=\"line\">\tprivate String token;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ApiClient getClient() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tApiClient client = new ApiClient();</span><br><span class=\"line\">\t\t\tclient.setBasePath(&quot;https://&quot; + host + &quot;:&quot; + port);</span><br><span class=\"line\">\t\t\tclient.setApiKeyPrefix(&quot;bearer&quot;);</span><br><span class=\"line\">\t\t\tclient.setApiKey(token);</span><br><span class=\"line\">\t\t\t//忽略ssl验证，不然java会报错。</span><br><span class=\"line\">\t\t\tclient.setVerifyingSsl(false);</span><br><span class=\"line\">\t\t\tConfiguration.setDefaultApiClient(client);</span><br><span class=\"line\">\t\t\treturn client;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;初始化ApiClient错误&quot;);</span><br><span class=\"line\">\t\t\tSystem.exit(1);</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用client调用k8s-api\"><a href=\"#使用client调用k8s-api\" class=\"headerlink\" title=\"使用client调用k8s api\"></a>使用client调用k8s api</h3><p>详细API接口文档：<a href=\"https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md</a><br>Controller.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class Controller &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RequestMapping(method = RequestMethod.GET, path = &quot;list_pod_for_all_namespace&quot;)</span><br><span class=\"line\">\t@ResponseBody</span><br><span class=\"line\">\tpublic RespObject listPod() &#123;</span><br><span class=\"line\">\t\tCoreV1Api api = new CoreV1Api();</span><br><span class=\"line\">\t\tV1PodList list;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tlist = api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);</span><br><span class=\"line\">\t\t\tList&lt;String&gt; names = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t\tfor (V1Pod item : list.getItems()) &#123;</span><br><span class=\"line\">\t\t\t\tnames.add(item.getMetadata().getName());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn new RespObject(names);</span><br><span class=\"line\">\t\t&#125; catch (ApiException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\treturn new RespObject(e.getMessage(), 1);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>RespObject.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RespObject &#123;</span><br><span class=\"line\">\tprivate Object result;</span><br><span class=\"line\">\tprivate int code;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic RespObject(Object res) &#123;</span><br><span class=\"line\">\t\tthis.code = 0;</span><br><span class=\"line\">\t\tthis.result = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic RespObject(Object res, int code) &#123;</span><br><span class=\"line\">\t\tthis.code = code;</span><br><span class=\"line\">\t\tthis.result = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Object getResult() &#123;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setResult(Object result) &#123;</span><br><span class=\"line\">\t\tthis.result = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getCode() &#123;</span><br><span class=\"line\">\t\treturn code;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setCode(int code) &#123;</span><br><span class=\"line\">\t\tthis.code = code;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译、部署到k8s\"><a href=\"#编译、部署到k8s\" class=\"headerlink\" title=\"编译、部署到k8s\"></a>编译、部署到k8s</h2><h3 id=\"制作docker镜像\"><a href=\"#制作docker镜像\" class=\"headerlink\" title=\"制作docker镜像\"></a>制作docker镜像</h3><p>k8s-api.dockerfile文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8-jre-alpine</span><br><span class=\"line\">WORKDIR /opt/</span><br><span class=\"line\">COPY app.jar /opt/app.jar</span><br><span class=\"line\">CMD [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;java -jar app.jar&quot;]</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t k8s-api-demo -f k8s-api.dockerfile .</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到k8s\"><a href=\"#部署到k8s\" class=\"headerlink\" title=\"部署到k8s\"></a>部署到k8s</h3><p>至此Java代码差不多了，打成jar包，docker build成镜像，用k8s部署，最后测试下</p>\n<p>k8s-api.yaml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">apiVersion: apps/v1beta2</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: k8s-api-demo</span><br><span class=\"line\"> labels:</span><br><span class=\"line\">  app: k8s-api-demo</span><br><span class=\"line\"> namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: k8s-api-demo</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: k8s-api-demo</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: k8s-api-demo</span><br><span class=\"line\">        image: k8s-api-demo</span><br><span class=\"line\">        #配置env</span><br><span class=\"line\">        env: </span><br><span class=\"line\">        - name: token</span><br><span class=\"line\">          valueFrom: </span><br><span class=\"line\">            #token的值引用自secret</span><br><span class=\"line\">            secretKeyRef: </span><br><span class=\"line\">              # 通过kubectl get secret -n kube-system|grep deploy-user 得到名称</span><br><span class=\"line\">              name: deploy-user-token-5g6w6</span><br><span class=\"line\">              key: token</span><br><span class=\"line\">              </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: k8s-api-demo</span><br><span class=\"line\"> labels:</span><br><span class=\"line\">  app: k8s-api-demo</span><br><span class=\"line\"> namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\"> ports:</span><br><span class=\"line\"> - port: 8099</span><br><span class=\"line\">   targetPort: 8089</span><br><span class=\"line\">   nodePort: 32180</span><br><span class=\"line\"> selector:</span><br><span class=\"line\">  app: k8s-api-demo</span><br><span class=\"line\"> type: NodePort</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f k8s-api.yaml</span><br><span class=\"line\">$ kubectl get svc -o wide -n kube-system |grep k8s-api-demo</span><br><span class=\"line\">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE       SELECTOR</span><br><span class=\"line\">k8s-api-demo       NodePort    10.100.62.191    &lt;none&gt;        8099:32180/TCP      1d        app=k8s-api-demo</span><br></pre></td></tr></table></figure>\n<p>通过访问master/node:32180端口即可访问到该项目<br>访问<a href=\"http://master/node:32180/list_pod_for_all_namespace\" target=\"_blank\" rel=\"noopener\">http://master/node:32180/list_pod_for_all_namespace</a><br>就可以返回所有namespace的pod name列表，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;result&quot;: [</span><br><span class=\"line\">        &quot;jenkins-74bbcdfd9-84hbr&quot;,</span><br><span class=\"line\">        &quot;adminserver-7c8c47cb95-ljf6z&quot;,</span><br><span class=\"line\">        &quot;dapi-test-pod&quot;,</span><br><span class=\"line\">        &quot;jobservice-7d584c99fb-2g2xq&quot;,</span><br><span class=\"line\">        &quot;k8s-api-6ccdbcb947-k6cwm&quot;,</span><br><span class=\"line\">        &quot;mysql-c87996b55-dhnjl&quot;,</span><br><span class=\"line\">        &quot;nfs-7b689fb468-p8pfm&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-2t4kr&quot;,</span><br><span class=\"line\">        &quot;registry-c5f6f84dd-kk46k&quot;,</span><br><span class=\"line\">        &quot;ui-78599c46-8xpx5&quot;,</span><br><span class=\"line\">        &quot;calico-etcd-68mzw&quot;,</span><br><span class=\"line\">        &quot;calico-kube-controllers-6ff88bf6d4-57bqw&quot;,</span><br><span class=\"line\">        &quot;calico-node-6q2r7&quot;,</span><br><span class=\"line\">        &quot;calico-node-dx6cm&quot;,</span><br><span class=\"line\">        &quot;default-http-backend-n9st8&quot;,</span><br><span class=\"line\">        &quot;etcd-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kube-apiserver-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kube-controller-manager-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kube-dns-545bc4bfd4-bgzg8&quot;,</span><br><span class=\"line\">        &quot;kube-proxy-77rlm&quot;,</span><br><span class=\"line\">        &quot;kube-proxy-nffh7&quot;,</span><br><span class=\"line\">        &quot;kube-scheduler-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kubernetes-dashboard-76894548fd-kkhrj&quot;,</span><br><span class=\"line\">        &quot;nginx-ingress-controller-4kkph&quot;,</span><br><span class=\"line\">        &quot;nginx-ingress-controller-h9cpd&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-lq4p7&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-qt5sx&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-v4lxg&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;code&quot;: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在jenkins里面使用\"><a href=\"#在jenkins里面使用\" class=\"headerlink\" title=\"在jenkins里面使用\"></a>在jenkins里面使用</h2><p>可以用pipeline用HttpRequest调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def resp;</span><br><span class=\"line\">def url = &quot;http://192.168.10.93:32180/list_pod_for_all_namespace&quot;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    resp = httpRequest httpMode: &apos;GET&apos;, url: &quot;$url&quot;</span><br><span class=\"line\">    println resp.result</span><br><span class=\"line\">&#125;catch(e)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>文章Java代码：<a href=\"https://github.com/dongamp1990/k8s-api-demo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/dongamp1990/k8s-api-demo.git</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用Kubernetes 加Jenkins CICD，那么问题来了，Jenkins里面怎么部署Kubernetes应用呢。曾经在Jenkins上搜索过几个插件，其中Kubernetes Continuous Deploy没搞懂怎么用，咨询了一技术哥们说：本质就是配置认证， 调用k8s接口实现。在他的指点下，使用Kubernetes client去调用Kubernetes接口z<br>k8s java client github地址：<a href=\"https://github.com/kubernetes-client/java。\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes-client/java。</a></p>\n<p>下面使用springboot + k8s client搭建的一个k8s-api项目</p>\n<h2 id=\"创建接口调用token\"><a href=\"#创建接口调用token\" class=\"headerlink\" title=\"创建接口调用token\"></a>创建接口调用token</h2><p>使用RBAC（基于角色的访问控制)调用接口，关于RBAC阅读以下文档<br>官网文档：<a href=\"https://v1-8.docs.kubernetes.io/docs/admin/authorization/rbac/\" target=\"_blank\" rel=\"noopener\">https://v1-8.docs.kubernetes.io/docs/admin/authorization/rbac/</a><br>中文翻译文档：<a href=\"https://jimmysong.io/kubernetes-handbook/concepts/rbac.html\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/kubernetes-handbook/concepts/rbac.html</a></p>\n<p>首先创建一个ServiceAccount，再绑定ClusterRole角色的cluster-admin权限，获得token，备client调接口用。<br>deployuser-token.yaml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: deploy-user</span><br><span class=\"line\"> annotations:</span><br><span class=\"line\">  rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\"> kind: ClusterRole</span><br><span class=\"line\"> name: cluster-admin</span><br><span class=\"line\"> apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">subjects:</span><br><span class=\"line\"> - kind: ServiceAccount</span><br><span class=\"line\">   name: deploy-user</span><br><span class=\"line\">   namespace: kube-system</span><br><span class=\"line\">   </span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: deploy-user</span><br><span class=\"line\"> namespace: kube-system</span><br><span class=\"line\"> labels:</span><br><span class=\"line\">  kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">  addonmanager.kubernetes.io/mode: Reconcile</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f cat deployuser-token.yaml</span><br></pre></td></tr></table></figure>\n<p>查看用户秘钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get secret -n kube-system|grep deploy-user</span><br><span class=\"line\">NAME                                     TYPE                                  DATA      AGE</span><br><span class=\"line\">deploy-user-token-5g6w6                  kubernetes.io/service-account-token   3         1d</span><br></pre></td></tr></table></figure></p>\n<p>#查看deploy-user账户秘钥详情<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe secret deploy-user-token-5g6w6  -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         deploy-user-token-5g6w6</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name=deploy-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid=0de0540e-2b24-11e8-841c-080027381e88</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:  TOKEN</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"新建一个Maven-project\"><a href=\"#新建一个Maven-project\" class=\"headerlink\" title=\"新建一个Maven project\"></a>新建一个Maven project</h2><p>pom.xml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;groupId&gt;org.kevin&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;k8s-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;name&gt;k8s-api&lt;/name&gt;</span><br><span class=\"line\">\t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">\t&lt;/properties&gt;</span><br><span class=\"line\">\t&lt;parent&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">\t    &lt;version&gt;1.5.10.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/parent&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;io.kubernetes&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;client-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.0.0-beta1&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t    &lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;build&gt;</span><br><span class=\"line\">\t\t&lt;finalName&gt;app&lt;/finalName&gt;</span><br><span class=\"line\">\t\t&lt;resources&gt;</span><br><span class=\"line\">\t\t\t&lt;resource&gt;</span><br><span class=\"line\">\t\t\t\t&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">\t\t\t\t&lt;includes&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;include&gt;**/*&lt;/include&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;include&gt;**/*/*&lt;/include&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/includes&gt;</span><br><span class=\"line\">\t\t\t&lt;/resource&gt;</span><br><span class=\"line\">\t\t&lt;/resources&gt;</span><br><span class=\"line\">\t\t&lt;plugins&gt;</span><br><span class=\"line\">\t\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;source&gt;1.7&lt;/source&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;target&gt;1.7&lt;/target&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">\t\t\t&lt;/plugin&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t\t&lt;plugin&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;/plugin&gt;</span><br><span class=\"line\">\t\t&lt;/plugins&gt;</span><br><span class=\"line\">\t&lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n<p>重点在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.kubernetes&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;client-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.0.0-beta1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>因为集群是k8s 1.8的，client需要使用1.0.0-beta1版本</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>新建application.properties配置以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8089</span><br><span class=\"line\"></span><br><span class=\"line\">#deploy-user的token，可以配置在配置文件，也可以在声明pod的设置env引用secret</span><br><span class=\"line\">#token=TOKEN</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"springboot启动类\"><a href=\"#springboot启动类\" class=\"headerlink\" title=\"springboot启动类\"></a>springboot启动类</h3><p>springboot启动类，包括初始化ApiClient。<br>KUBERNETES_SERVICE_HOST 使用k8s部署后pod的env环境变量，k8s apiserver地址<br>KUBERNETES_SERVICE_PORT k8s apiserver端口<br>token 是调接口凭证。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws IOException, ApiException &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(App.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Value(&quot;$&#123;KUBERNETES_SERVICE_HOST&#125;&quot;)</span><br><span class=\"line\">\tprivate String host;</span><br><span class=\"line\">\t@Value(&quot;$&#123;KUBERNETES_SERVICE_PORT&#125;&quot;)</span><br><span class=\"line\">\tprivate String port;</span><br><span class=\"line\">\t@Value(&quot;$&#123;token&#125;&quot;)</span><br><span class=\"line\">\tprivate String token;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ApiClient getClient() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tApiClient client = new ApiClient();</span><br><span class=\"line\">\t\t\tclient.setBasePath(&quot;https://&quot; + host + &quot;:&quot; + port);</span><br><span class=\"line\">\t\t\tclient.setApiKeyPrefix(&quot;bearer&quot;);</span><br><span class=\"line\">\t\t\tclient.setApiKey(token);</span><br><span class=\"line\">\t\t\t//忽略ssl验证，不然java会报错。</span><br><span class=\"line\">\t\t\tclient.setVerifyingSsl(false);</span><br><span class=\"line\">\t\t\tConfiguration.setDefaultApiClient(client);</span><br><span class=\"line\">\t\t\treturn client;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;初始化ApiClient错误&quot;);</span><br><span class=\"line\">\t\t\tSystem.exit(1);</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用client调用k8s-api\"><a href=\"#使用client调用k8s-api\" class=\"headerlink\" title=\"使用client调用k8s api\"></a>使用client调用k8s api</h3><p>详细API接口文档：<a href=\"https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md</a><br>Controller.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class Controller &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RequestMapping(method = RequestMethod.GET, path = &quot;list_pod_for_all_namespace&quot;)</span><br><span class=\"line\">\t@ResponseBody</span><br><span class=\"line\">\tpublic RespObject listPod() &#123;</span><br><span class=\"line\">\t\tCoreV1Api api = new CoreV1Api();</span><br><span class=\"line\">\t\tV1PodList list;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tlist = api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);</span><br><span class=\"line\">\t\t\tList&lt;String&gt; names = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t\tfor (V1Pod item : list.getItems()) &#123;</span><br><span class=\"line\">\t\t\t\tnames.add(item.getMetadata().getName());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn new RespObject(names);</span><br><span class=\"line\">\t\t&#125; catch (ApiException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\treturn new RespObject(e.getMessage(), 1);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>RespObject.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RespObject &#123;</span><br><span class=\"line\">\tprivate Object result;</span><br><span class=\"line\">\tprivate int code;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic RespObject(Object res) &#123;</span><br><span class=\"line\">\t\tthis.code = 0;</span><br><span class=\"line\">\t\tthis.result = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic RespObject(Object res, int code) &#123;</span><br><span class=\"line\">\t\tthis.code = code;</span><br><span class=\"line\">\t\tthis.result = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Object getResult() &#123;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setResult(Object result) &#123;</span><br><span class=\"line\">\t\tthis.result = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getCode() &#123;</span><br><span class=\"line\">\t\treturn code;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setCode(int code) &#123;</span><br><span class=\"line\">\t\tthis.code = code;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编译、部署到k8s\"><a href=\"#编译、部署到k8s\" class=\"headerlink\" title=\"编译、部署到k8s\"></a>编译、部署到k8s</h2><h3 id=\"制作docker镜像\"><a href=\"#制作docker镜像\" class=\"headerlink\" title=\"制作docker镜像\"></a>制作docker镜像</h3><p>k8s-api.dockerfile文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8-jre-alpine</span><br><span class=\"line\">WORKDIR /opt/</span><br><span class=\"line\">COPY app.jar /opt/app.jar</span><br><span class=\"line\">CMD [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;java -jar app.jar&quot;]</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t k8s-api-demo -f k8s-api.dockerfile .</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到k8s\"><a href=\"#部署到k8s\" class=\"headerlink\" title=\"部署到k8s\"></a>部署到k8s</h3><p>至此Java代码差不多了，打成jar包，docker build成镜像，用k8s部署，最后测试下</p>\n<p>k8s-api.yaml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">apiVersion: apps/v1beta2</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: k8s-api-demo</span><br><span class=\"line\"> labels:</span><br><span class=\"line\">  app: k8s-api-demo</span><br><span class=\"line\"> namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: k8s-api-demo</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: k8s-api-demo</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: k8s-api-demo</span><br><span class=\"line\">        image: k8s-api-demo</span><br><span class=\"line\">        #配置env</span><br><span class=\"line\">        env: </span><br><span class=\"line\">        - name: token</span><br><span class=\"line\">          valueFrom: </span><br><span class=\"line\">            #token的值引用自secret</span><br><span class=\"line\">            secretKeyRef: </span><br><span class=\"line\">              # 通过kubectl get secret -n kube-system|grep deploy-user 得到名称</span><br><span class=\"line\">              name: deploy-user-token-5g6w6</span><br><span class=\"line\">              key: token</span><br><span class=\"line\">              </span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\"> name: k8s-api-demo</span><br><span class=\"line\"> labels:</span><br><span class=\"line\">  app: k8s-api-demo</span><br><span class=\"line\"> namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\"> ports:</span><br><span class=\"line\"> - port: 8099</span><br><span class=\"line\">   targetPort: 8089</span><br><span class=\"line\">   nodePort: 32180</span><br><span class=\"line\"> selector:</span><br><span class=\"line\">  app: k8s-api-demo</span><br><span class=\"line\"> type: NodePort</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f k8s-api.yaml</span><br><span class=\"line\">$ kubectl get svc -o wide -n kube-system |grep k8s-api-demo</span><br><span class=\"line\">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE       SELECTOR</span><br><span class=\"line\">k8s-api-demo       NodePort    10.100.62.191    &lt;none&gt;        8099:32180/TCP      1d        app=k8s-api-demo</span><br></pre></td></tr></table></figure>\n<p>通过访问master/node:32180端口即可访问到该项目<br>访问<a href=\"http://master/node:32180/list_pod_for_all_namespace\" target=\"_blank\" rel=\"noopener\">http://master/node:32180/list_pod_for_all_namespace</a><br>就可以返回所有namespace的pod name列表，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;result&quot;: [</span><br><span class=\"line\">        &quot;jenkins-74bbcdfd9-84hbr&quot;,</span><br><span class=\"line\">        &quot;adminserver-7c8c47cb95-ljf6z&quot;,</span><br><span class=\"line\">        &quot;dapi-test-pod&quot;,</span><br><span class=\"line\">        &quot;jobservice-7d584c99fb-2g2xq&quot;,</span><br><span class=\"line\">        &quot;k8s-api-6ccdbcb947-k6cwm&quot;,</span><br><span class=\"line\">        &quot;mysql-c87996b55-dhnjl&quot;,</span><br><span class=\"line\">        &quot;nfs-7b689fb468-p8pfm&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-2t4kr&quot;,</span><br><span class=\"line\">        &quot;registry-c5f6f84dd-kk46k&quot;,</span><br><span class=\"line\">        &quot;ui-78599c46-8xpx5&quot;,</span><br><span class=\"line\">        &quot;calico-etcd-68mzw&quot;,</span><br><span class=\"line\">        &quot;calico-kube-controllers-6ff88bf6d4-57bqw&quot;,</span><br><span class=\"line\">        &quot;calico-node-6q2r7&quot;,</span><br><span class=\"line\">        &quot;calico-node-dx6cm&quot;,</span><br><span class=\"line\">        &quot;default-http-backend-n9st8&quot;,</span><br><span class=\"line\">        &quot;etcd-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kube-apiserver-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kube-controller-manager-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kube-dns-545bc4bfd4-bgzg8&quot;,</span><br><span class=\"line\">        &quot;kube-proxy-77rlm&quot;,</span><br><span class=\"line\">        &quot;kube-proxy-nffh7&quot;,</span><br><span class=\"line\">        &quot;kube-scheduler-ubuntu-k8s&quot;,</span><br><span class=\"line\">        &quot;kubernetes-dashboard-76894548fd-kkhrj&quot;,</span><br><span class=\"line\">        &quot;nginx-ingress-controller-4kkph&quot;,</span><br><span class=\"line\">        &quot;nginx-ingress-controller-h9cpd&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-lq4p7&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-qt5sx&quot;,</span><br><span class=\"line\">        &quot;nginx-75f4785b7-v4lxg&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;code&quot;: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在jenkins里面使用\"><a href=\"#在jenkins里面使用\" class=\"headerlink\" title=\"在jenkins里面使用\"></a>在jenkins里面使用</h2><p>可以用pipeline用HttpRequest调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def resp;</span><br><span class=\"line\">def url = &quot;http://192.168.10.93:32180/list_pod_for_all_namespace&quot;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    resp = httpRequest httpMode: &apos;GET&apos;, url: &quot;$url&quot;</span><br><span class=\"line\">    println resp.result</span><br><span class=\"line\">&#125;catch(e)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>文章Java代码：<a href=\"https://github.com/dongamp1990/k8s-api-demo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/dongamp1990/k8s-api-demo.git</a></p>\n"},{"title":"Docker Swarm集群使用Traefik","date":"2018-04-01T16:00:00.000Z","_content":"\n## 前言\nTræfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。\n官方文档里面介绍了很多场景的使用，详情点击<a href='https://docs.traefik.cn/'>官方文档</a>\n\n## 部署Traefik\n### swarm网络\n\nswarm集群里面使用，需要使用overlay网络, 需先创建一个overlay网络，或者使用已有的overlay网络\n<font color='red'>（不要使用名字为ingress的那个网络，一开始我使用了，怎么弄都不成功，踩过得坑。谨记）</font>\n\n```\n$ docker network create traefik-net --driver overlay\n\n```\n查看网络\n```\n$ docker network ls\n\np86srgdn2zne        traefik-net         overlay             swarm\n```\n\ntraefik.yaml\n```\nversion: \"3\"\nservices:\n  traefik:\n    image: traefik\n    command: --docker --docker.swarmmode  --docker.domain=maxfun.co --docker.watch  --web --api --logLevel=DEBUG\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    deploy:\n      placement:\n        constraints:\n        - node.role == manager \n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - $PWD/traefik.toml:/etc/traefik/traefik.toml\n    networks:\n    - traefik-net\nnetworks:\n  traefik-net:\n    external: true\n```\ntreafik配置文件:https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml\n启动traefik服务\n```\n$ docker stack deploy -c traefik.yaml traefik\n```\n或者\n\n```\ndocker service create \\\n    --name traefik \\\n    --constraint=node.role==manager \\\n    --publish 80:80 \\\n    --publish 8080:8080 \\\n    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\\n    --mount type=bind,source=/opt/traefik/traefik.toml,target=/etc/traefik/traefik.toml \\\n    --network traefik-net \\\n    traefik \\\n    --docker \\\n    --docker.swarmmode \\\n    --docker.domain=maxfun.co \\\n    --docker.watch \\\n    --web \\\n    --api\n```\n\n\n###  部署jenkins应用\n在master节点部署jenkins，不适用端口来访问jenkins\n\nrun-jenkins.sh\n```\nmkdir -p /opt/jenkins-blueocean-data\nMVN_REPO_PATH=/home/coder/developtools/mavenRepository\ndocker service create \\\n  --name jenkins \\\n  --constraint=node.role==manager \\\n  -u root \\\n  -e JAVA_OPTS=-Duser.timezone=GMT+08 \\\n  -e JENKINS_OPTS=--httpPort=8080 \\\n  --publish 8089:8080 \\\n  --mount type=bind,source=/opt/jenkins-blueocean-data,target=/var/jenkins_home \\\n  --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\\n  --mount type=bind,source=$MVN_REPO_PATH,target=/root/.m2/repository \\\n  --mount type=bind,source=/opt/jenkins-keys,target=/root/.ssh \\\n  --hostname jenkins \\\n  --network traefik-net \\\n  --label traefik.port=8080 \\\n  --label traefik.docker.network=traefik-net \\\n  --label traefik.frontend.rule=Host:jenkins.maxfun.co \\\n  --label traefik.backend=jenkins-backend\n jenkinsci/blueocean:1.3.5\n```\n\n重点参数是下面几个\n```\n  --network traefik-net \\\n  --label traefik.port=8080 \\\n  --label traefik.docker.network=traefik-net \\\n  --label traefik.frontend.rule=Host:jenkins.maxfun.co \\\n  \n  --network \n   指定已创建好的overlay网络\n  --label traefik.port=8080\n   注册使用这个端口。当容器暴露出多个端口时非常有效。\n  --label traefik.docker.network=traefik-net \n   设置连接到这个容器的docker网络。 如果容易被链接到多个网络，\n   一定要设置合适的网络名称（你可以使用docker检查<container_id>）否则它将自动选择一个（取决于docker如何返回它们）。\n  --label traefik.frontend.rule=Host:jenkins.maxfun.co \n   覆盖默认前端规则（默认：Host:{containerName}.{domain}）\n  --label traefik.backend=jenkins-backend\n   将容器指向 enkins-backend 后端\n  --traefik.enable=false\n   可以使用docker service update servicename --label-add traefik.enable=false 调整该service不可用，从而达到把应用从负载均衡列表剔除\n  JENKINS_OPTS=--httpPort=8080\n   jenkins参数 --httpPort自定义jenkins端口 \n```\n\n更多traefik容器覆盖默认表现方式的Label：https://docs.traefik.cn/toml#docker-backend\n\n启动jenkins服务\n```\n$ sh run-jenkins.sh\n```\n\n测试\n```\n$ curl -H Host:jenkins.maxfun.co http://127.0.0.1\n```\n会返回以下内容，证明成功了。\n```\n<html><head><meta http-equiv='refresh' content='1;url=/login?from=%2F'/>\n<script>window.location.replace('/login?from=%2F');</script></head>\n<body style='background-color:white; color:white;'>\nAuthentication required\n<!--\nYou are authenticated as: anonymous\nGroups that you are in:\n  \nPermission you need to have (but didn't): hudson.model.Hudson.Read\n ... which is implied by: hudson.security.Permission.GenericRead\n ... which is implied by: hudson.model.Hudson.Administer\n-->\n</body></html>\n```\n就可以愉快的使用域名来访问jenkins啦。\n\n### 官方文档的例子\n\nwhoami.yaml\n```\nversion: \"3\"\nservices:\n  web:\n    image: emilevauge/whoami\n    networks: \n      - traefik-net\n    deploy:\n      labels:\n        - \"traefik.backend=whoami-backend\"\n        - \"traefik.port=80\"\n        - \"traefik.docker.network=traefik-net\"\n        - \"traefik.frontend.rule=Host:whoamistack.traefik\"\nnetworks:\n  traefik-net:\n    external: true\n```\n<font color='red'>注意： docker-compose文件 labels必须在deploy里面，结构跟上面所示</font>\n\n\n#### 启动第一个服务\n```\n$ docker stack deploy -c whoami.yaml whoami1\n```\n\n测试\n```\n$ curl -H Host:whoamistack.traefik http://127.0.0.1\n```\n\n```\nHostname: 9e402666ec66\nIP: 127.0.0.1\nIP: 10.0.1.9\nIP: 10.0.1.8\nIP: 192.168.16.10\nGET / HTTP/1.1\nHost: whoamistack.traefik\nUser-Agent: curl/7.35.0\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 10.255.0.2\nX-Forwarded-Host: whoamistack.traefik\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: 361dbc4b6660\nX-Real-Ip: 10.255.0.2\n```\n#### 启动第二个服务\n```\n$ docker stack deploy -c whoami.yaml whoami12\n```\n\n多次执行\n```\n$ curl -H Host:whoamistack.traefik http://127.0.0.1\n```\nHostname: 来回变化，这表明负载均衡功能正常工作了\n\n\n资料参考：https://docs.traefik.cn/toml#docker-backend","source":"_posts/docker-traefik-usage.md","raw":"---\ntitle: Docker Swarm集群使用Traefik\ntags: [docker]\ndate: 2018-04-02\n---\n\n## 前言\nTræfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。\n官方文档里面介绍了很多场景的使用，详情点击<a href='https://docs.traefik.cn/'>官方文档</a>\n\n## 部署Traefik\n### swarm网络\n\nswarm集群里面使用，需要使用overlay网络, 需先创建一个overlay网络，或者使用已有的overlay网络\n<font color='red'>（不要使用名字为ingress的那个网络，一开始我使用了，怎么弄都不成功，踩过得坑。谨记）</font>\n\n```\n$ docker network create traefik-net --driver overlay\n\n```\n查看网络\n```\n$ docker network ls\n\np86srgdn2zne        traefik-net         overlay             swarm\n```\n\ntraefik.yaml\n```\nversion: \"3\"\nservices:\n  traefik:\n    image: traefik\n    command: --docker --docker.swarmmode  --docker.domain=maxfun.co --docker.watch  --web --api --logLevel=DEBUG\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    deploy:\n      placement:\n        constraints:\n        - node.role == manager \n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - $PWD/traefik.toml:/etc/traefik/traefik.toml\n    networks:\n    - traefik-net\nnetworks:\n  traefik-net:\n    external: true\n```\ntreafik配置文件:https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml\n启动traefik服务\n```\n$ docker stack deploy -c traefik.yaml traefik\n```\n或者\n\n```\ndocker service create \\\n    --name traefik \\\n    --constraint=node.role==manager \\\n    --publish 80:80 \\\n    --publish 8080:8080 \\\n    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\\n    --mount type=bind,source=/opt/traefik/traefik.toml,target=/etc/traefik/traefik.toml \\\n    --network traefik-net \\\n    traefik \\\n    --docker \\\n    --docker.swarmmode \\\n    --docker.domain=maxfun.co \\\n    --docker.watch \\\n    --web \\\n    --api\n```\n\n\n###  部署jenkins应用\n在master节点部署jenkins，不适用端口来访问jenkins\n\nrun-jenkins.sh\n```\nmkdir -p /opt/jenkins-blueocean-data\nMVN_REPO_PATH=/home/coder/developtools/mavenRepository\ndocker service create \\\n  --name jenkins \\\n  --constraint=node.role==manager \\\n  -u root \\\n  -e JAVA_OPTS=-Duser.timezone=GMT+08 \\\n  -e JENKINS_OPTS=--httpPort=8080 \\\n  --publish 8089:8080 \\\n  --mount type=bind,source=/opt/jenkins-blueocean-data,target=/var/jenkins_home \\\n  --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\\n  --mount type=bind,source=$MVN_REPO_PATH,target=/root/.m2/repository \\\n  --mount type=bind,source=/opt/jenkins-keys,target=/root/.ssh \\\n  --hostname jenkins \\\n  --network traefik-net \\\n  --label traefik.port=8080 \\\n  --label traefik.docker.network=traefik-net \\\n  --label traefik.frontend.rule=Host:jenkins.maxfun.co \\\n  --label traefik.backend=jenkins-backend\n jenkinsci/blueocean:1.3.5\n```\n\n重点参数是下面几个\n```\n  --network traefik-net \\\n  --label traefik.port=8080 \\\n  --label traefik.docker.network=traefik-net \\\n  --label traefik.frontend.rule=Host:jenkins.maxfun.co \\\n  \n  --network \n   指定已创建好的overlay网络\n  --label traefik.port=8080\n   注册使用这个端口。当容器暴露出多个端口时非常有效。\n  --label traefik.docker.network=traefik-net \n   设置连接到这个容器的docker网络。 如果容易被链接到多个网络，\n   一定要设置合适的网络名称（你可以使用docker检查<container_id>）否则它将自动选择一个（取决于docker如何返回它们）。\n  --label traefik.frontend.rule=Host:jenkins.maxfun.co \n   覆盖默认前端规则（默认：Host:{containerName}.{domain}）\n  --label traefik.backend=jenkins-backend\n   将容器指向 enkins-backend 后端\n  --traefik.enable=false\n   可以使用docker service update servicename --label-add traefik.enable=false 调整该service不可用，从而达到把应用从负载均衡列表剔除\n  JENKINS_OPTS=--httpPort=8080\n   jenkins参数 --httpPort自定义jenkins端口 \n```\n\n更多traefik容器覆盖默认表现方式的Label：https://docs.traefik.cn/toml#docker-backend\n\n启动jenkins服务\n```\n$ sh run-jenkins.sh\n```\n\n测试\n```\n$ curl -H Host:jenkins.maxfun.co http://127.0.0.1\n```\n会返回以下内容，证明成功了。\n```\n<html><head><meta http-equiv='refresh' content='1;url=/login?from=%2F'/>\n<script>window.location.replace('/login?from=%2F');</script></head>\n<body style='background-color:white; color:white;'>\nAuthentication required\n<!--\nYou are authenticated as: anonymous\nGroups that you are in:\n  \nPermission you need to have (but didn't): hudson.model.Hudson.Read\n ... which is implied by: hudson.security.Permission.GenericRead\n ... which is implied by: hudson.model.Hudson.Administer\n-->\n</body></html>\n```\n就可以愉快的使用域名来访问jenkins啦。\n\n### 官方文档的例子\n\nwhoami.yaml\n```\nversion: \"3\"\nservices:\n  web:\n    image: emilevauge/whoami\n    networks: \n      - traefik-net\n    deploy:\n      labels:\n        - \"traefik.backend=whoami-backend\"\n        - \"traefik.port=80\"\n        - \"traefik.docker.network=traefik-net\"\n        - \"traefik.frontend.rule=Host:whoamistack.traefik\"\nnetworks:\n  traefik-net:\n    external: true\n```\n<font color='red'>注意： docker-compose文件 labels必须在deploy里面，结构跟上面所示</font>\n\n\n#### 启动第一个服务\n```\n$ docker stack deploy -c whoami.yaml whoami1\n```\n\n测试\n```\n$ curl -H Host:whoamistack.traefik http://127.0.0.1\n```\n\n```\nHostname: 9e402666ec66\nIP: 127.0.0.1\nIP: 10.0.1.9\nIP: 10.0.1.8\nIP: 192.168.16.10\nGET / HTTP/1.1\nHost: whoamistack.traefik\nUser-Agent: curl/7.35.0\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 10.255.0.2\nX-Forwarded-Host: whoamistack.traefik\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: 361dbc4b6660\nX-Real-Ip: 10.255.0.2\n```\n#### 启动第二个服务\n```\n$ docker stack deploy -c whoami.yaml whoami12\n```\n\n多次执行\n```\n$ curl -H Host:whoamistack.traefik http://127.0.0.1\n```\nHostname: 来回变化，这表明负载均衡功能正常工作了\n\n\n资料参考：https://docs.traefik.cn/toml#docker-backend","slug":"docker-traefik-usage","published":1,"updated":"2018-05-23T02:17:50.226Z","_id":"cjhigz1zy0008n8vrm7r0l4qd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。<br>官方文档里面介绍了很多场景的使用，详情点击<a href=\"https://docs.traefik.cn/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"部署Traefik\"><a href=\"#部署Traefik\" class=\"headerlink\" title=\"部署Traefik\"></a>部署Traefik</h2><h3 id=\"swarm网络\"><a href=\"#swarm网络\" class=\"headerlink\" title=\"swarm网络\"></a>swarm网络</h3><p>swarm集群里面使用，需要使用overlay网络, 需先创建一个overlay网络，或者使用已有的overlay网络</p>\n<font color=\"red\">（不要使用名字为ingress的那个网络，一开始我使用了，怎么弄都不成功，踩过得坑。谨记）</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network create traefik-net --driver overlay</span><br></pre></td></tr></table></figure>\n<p>查看网络<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network ls</span><br><span class=\"line\"></span><br><span class=\"line\">p86srgdn2zne        traefik-net         overlay             swarm</span><br></pre></td></tr></table></figure></p>\n<p>traefik.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  traefik:</span><br><span class=\"line\">    image: traefik</span><br><span class=\"line\">    command: --docker --docker.swarmmode  --docker.domain=maxfun.co --docker.watch  --web --api --logLevel=DEBUG</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;80:80&quot;</span><br><span class=\"line\">      - &quot;8080:8080&quot;</span><br><span class=\"line\">      - &quot;443:443&quot;</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      placement:</span><br><span class=\"line\">        constraints:</span><br><span class=\"line\">        - node.role == manager </span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">      - $PWD/traefik.toml:/etc/traefik/traefik.toml</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">    - traefik-net</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  traefik-net:</span><br><span class=\"line\">    external: true</span><br></pre></td></tr></table></figure></p>\n<p>treafik配置文件:<a href=\"https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml</a><br>启动traefik服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c traefik.yaml traefik</span><br></pre></td></tr></table></figure></p>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service create \\</span><br><span class=\"line\">    --name traefik \\</span><br><span class=\"line\">    --constraint=node.role==manager \\</span><br><span class=\"line\">    --publish 80:80 \\</span><br><span class=\"line\">    --publish 8080:8080 \\</span><br><span class=\"line\">    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\</span><br><span class=\"line\">    --mount type=bind,source=/opt/traefik/traefik.toml,target=/etc/traefik/traefik.toml \\</span><br><span class=\"line\">    --network traefik-net \\</span><br><span class=\"line\">    traefik \\</span><br><span class=\"line\">    --docker \\</span><br><span class=\"line\">    --docker.swarmmode \\</span><br><span class=\"line\">    --docker.domain=maxfun.co \\</span><br><span class=\"line\">    --docker.watch \\</span><br><span class=\"line\">    --web \\</span><br><span class=\"line\">    --api</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署jenkins应用\"><a href=\"#部署jenkins应用\" class=\"headerlink\" title=\"部署jenkins应用\"></a>部署jenkins应用</h3><p>在master节点部署jenkins，不适用端口来访问jenkins</p>\n<p>run-jenkins.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/jenkins-blueocean-data</span><br><span class=\"line\">MVN_REPO_PATH=/home/coder/developtools/mavenRepository</span><br><span class=\"line\">docker service create \\</span><br><span class=\"line\">  --name jenkins \\</span><br><span class=\"line\">  --constraint=node.role==manager \\</span><br><span class=\"line\">  -u root \\</span><br><span class=\"line\">  -e JAVA_OPTS=-Duser.timezone=GMT+08 \\</span><br><span class=\"line\">  -e JENKINS_OPTS=--httpPort=8080 \\</span><br><span class=\"line\">  --publish 8089:8080 \\</span><br><span class=\"line\">  --mount type=bind,source=/opt/jenkins-blueocean-data,target=/var/jenkins_home \\</span><br><span class=\"line\">  --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\</span><br><span class=\"line\">  --mount type=bind,source=$MVN_REPO_PATH,target=/root/.m2/repository \\</span><br><span class=\"line\">  --mount type=bind,source=/opt/jenkins-keys,target=/root/.ssh \\</span><br><span class=\"line\">  --hostname jenkins \\</span><br><span class=\"line\">  --network traefik-net \\</span><br><span class=\"line\">  --label traefik.port=8080 \\</span><br><span class=\"line\">  --label traefik.docker.network=traefik-net \\</span><br><span class=\"line\">  --label traefik.frontend.rule=Host:jenkins.maxfun.co \\</span><br><span class=\"line\">  --label traefik.backend=jenkins-backend</span><br><span class=\"line\"> jenkinsci/blueocean:1.3.5</span><br></pre></td></tr></table></figure></p>\n<p>重点参数是下面几个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--network traefik-net \\</span><br><span class=\"line\">--label traefik.port=8080 \\</span><br><span class=\"line\">--label traefik.docker.network=traefik-net \\</span><br><span class=\"line\">--label traefik.frontend.rule=Host:jenkins.maxfun.co \\</span><br><span class=\"line\"></span><br><span class=\"line\">--network </span><br><span class=\"line\"> 指定已创建好的overlay网络</span><br><span class=\"line\">--label traefik.port=8080</span><br><span class=\"line\"> 注册使用这个端口。当容器暴露出多个端口时非常有效。</span><br><span class=\"line\">--label traefik.docker.network=traefik-net </span><br><span class=\"line\"> 设置连接到这个容器的docker网络。 如果容易被链接到多个网络，</span><br><span class=\"line\"> 一定要设置合适的网络名称（你可以使用docker检查&lt;container_id&gt;）否则它将自动选择一个（取决于docker如何返回它们）。</span><br><span class=\"line\">--label traefik.frontend.rule=Host:jenkins.maxfun.co </span><br><span class=\"line\"> 覆盖默认前端规则（默认：Host:&#123;containerName&#125;.&#123;domain&#125;）</span><br><span class=\"line\">--label traefik.backend=jenkins-backend</span><br><span class=\"line\"> 将容器指向 enkins-backend 后端</span><br><span class=\"line\">--traefik.enable=false</span><br><span class=\"line\"> 可以使用docker service update servicename --label-add traefik.enable=false 调整该service不可用，从而达到把应用从负载均衡列表剔除</span><br><span class=\"line\">JENKINS_OPTS=--httpPort=8080</span><br><span class=\"line\"> jenkins参数 --httpPort自定义jenkins端口</span><br></pre></td></tr></table></figure></p>\n<p>更多traefik容器覆盖默认表现方式的Label：<a href=\"https://docs.traefik.cn/toml#docker-backend\" target=\"_blank\" rel=\"noopener\">https://docs.traefik.cn/toml#docker-backend</a></p>\n<p>启动jenkins服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh run-jenkins.sh</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -H Host:jenkins.maxfun.co http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>会返回以下内容，证明成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&apos;refresh&apos; content=&apos;1;url=/login?from=%2F&apos;/&gt;</span><br><span class=\"line\">&lt;script&gt;window.location.replace(&apos;/login?from=%2F&apos;);&lt;/script&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body style=&apos;background-color:white; color:white;&apos;&gt;</span><br><span class=\"line\">Authentication required</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">You are authenticated as: anonymous</span><br><span class=\"line\">Groups that you are in:</span><br><span class=\"line\">  </span><br><span class=\"line\">Permission you need to have (but didn&apos;t): hudson.model.Hudson.Read</span><br><span class=\"line\"> ... which is implied by: hudson.security.Permission.GenericRead</span><br><span class=\"line\"> ... which is implied by: hudson.model.Hudson.Administer</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>就可以愉快的使用域名来访问jenkins啦。</p>\n<h3 id=\"官方文档的例子\"><a href=\"#官方文档的例子\" class=\"headerlink\" title=\"官方文档的例子\"></a>官方文档的例子</h3><p>whoami.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  web:</span><br><span class=\"line\">    image: emilevauge/whoami</span><br><span class=\"line\">    networks: </span><br><span class=\"line\">      - traefik-net</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        - &quot;traefik.backend=whoami-backend&quot;</span><br><span class=\"line\">        - &quot;traefik.port=80&quot;</span><br><span class=\"line\">        - &quot;traefik.docker.network=traefik-net&quot;</span><br><span class=\"line\">        - &quot;traefik.frontend.rule=Host:whoamistack.traefik&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  traefik-net:</span><br><span class=\"line\">    external: true</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">注意： docker-compose文件 labels必须在deploy里面，结构跟上面所示</font>\n\n\n<h4 id=\"启动第一个服务\"><a href=\"#启动第一个服务\" class=\"headerlink\" title=\"启动第一个服务\"></a>启动第一个服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c whoami.yaml whoami1</span><br></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -H Host:whoamistack.traefik http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hostname: 9e402666ec66</span><br><span class=\"line\">IP: 127.0.0.1</span><br><span class=\"line\">IP: 10.0.1.9</span><br><span class=\"line\">IP: 10.0.1.8</span><br><span class=\"line\">IP: 192.168.16.10</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: whoamistack.traefik</span><br><span class=\"line\">User-Agent: curl/7.35.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Accept-Encoding: gzip</span><br><span class=\"line\">X-Forwarded-For: 10.255.0.2</span><br><span class=\"line\">X-Forwarded-Host: whoamistack.traefik</span><br><span class=\"line\">X-Forwarded-Port: 80</span><br><span class=\"line\">X-Forwarded-Proto: http</span><br><span class=\"line\">X-Forwarded-Server: 361dbc4b6660</span><br><span class=\"line\">X-Real-Ip: 10.255.0.2</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动第二个服务\"><a href=\"#启动第二个服务\" class=\"headerlink\" title=\"启动第二个服务\"></a>启动第二个服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c whoami.yaml whoami12</span><br></pre></td></tr></table></figure>\n<p>多次执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -H Host:whoamistack.traefik http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>Hostname: 来回变化，这表明负载均衡功能正常工作了</p>\n<p>资料参考：<a href=\"https://docs.traefik.cn/toml#docker-backend\" target=\"_blank\" rel=\"noopener\">https://docs.traefik.cn/toml#docker-backend</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。<br>官方文档里面介绍了很多场景的使用，详情点击<a href=\"https://docs.traefik.cn/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"部署Traefik\"><a href=\"#部署Traefik\" class=\"headerlink\" title=\"部署Traefik\"></a>部署Traefik</h2><h3 id=\"swarm网络\"><a href=\"#swarm网络\" class=\"headerlink\" title=\"swarm网络\"></a>swarm网络</h3><p>swarm集群里面使用，需要使用overlay网络, 需先创建一个overlay网络，或者使用已有的overlay网络</p>\n<font color=\"red\">（不要使用名字为ingress的那个网络，一开始我使用了，怎么弄都不成功，踩过得坑。谨记）</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network create traefik-net --driver overlay</span><br></pre></td></tr></table></figure>\n<p>查看网络<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network ls</span><br><span class=\"line\"></span><br><span class=\"line\">p86srgdn2zne        traefik-net         overlay             swarm</span><br></pre></td></tr></table></figure></p>\n<p>traefik.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  traefik:</span><br><span class=\"line\">    image: traefik</span><br><span class=\"line\">    command: --docker --docker.swarmmode  --docker.domain=maxfun.co --docker.watch  --web --api --logLevel=DEBUG</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;80:80&quot;</span><br><span class=\"line\">      - &quot;8080:8080&quot;</span><br><span class=\"line\">      - &quot;443:443&quot;</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      placement:</span><br><span class=\"line\">        constraints:</span><br><span class=\"line\">        - node.role == manager </span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">      - $PWD/traefik.toml:/etc/traefik/traefik.toml</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">    - traefik-net</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  traefik-net:</span><br><span class=\"line\">    external: true</span><br></pre></td></tr></table></figure></p>\n<p>treafik配置文件:<a href=\"https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml</a><br>启动traefik服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c traefik.yaml traefik</span><br></pre></td></tr></table></figure></p>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service create \\</span><br><span class=\"line\">    --name traefik \\</span><br><span class=\"line\">    --constraint=node.role==manager \\</span><br><span class=\"line\">    --publish 80:80 \\</span><br><span class=\"line\">    --publish 8080:8080 \\</span><br><span class=\"line\">    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\</span><br><span class=\"line\">    --mount type=bind,source=/opt/traefik/traefik.toml,target=/etc/traefik/traefik.toml \\</span><br><span class=\"line\">    --network traefik-net \\</span><br><span class=\"line\">    traefik \\</span><br><span class=\"line\">    --docker \\</span><br><span class=\"line\">    --docker.swarmmode \\</span><br><span class=\"line\">    --docker.domain=maxfun.co \\</span><br><span class=\"line\">    --docker.watch \\</span><br><span class=\"line\">    --web \\</span><br><span class=\"line\">    --api</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署jenkins应用\"><a href=\"#部署jenkins应用\" class=\"headerlink\" title=\"部署jenkins应用\"></a>部署jenkins应用</h3><p>在master节点部署jenkins，不适用端口来访问jenkins</p>\n<p>run-jenkins.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/jenkins-blueocean-data</span><br><span class=\"line\">MVN_REPO_PATH=/home/coder/developtools/mavenRepository</span><br><span class=\"line\">docker service create \\</span><br><span class=\"line\">  --name jenkins \\</span><br><span class=\"line\">  --constraint=node.role==manager \\</span><br><span class=\"line\">  -u root \\</span><br><span class=\"line\">  -e JAVA_OPTS=-Duser.timezone=GMT+08 \\</span><br><span class=\"line\">  -e JENKINS_OPTS=--httpPort=8080 \\</span><br><span class=\"line\">  --publish 8089:8080 \\</span><br><span class=\"line\">  --mount type=bind,source=/opt/jenkins-blueocean-data,target=/var/jenkins_home \\</span><br><span class=\"line\">  --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \\</span><br><span class=\"line\">  --mount type=bind,source=$MVN_REPO_PATH,target=/root/.m2/repository \\</span><br><span class=\"line\">  --mount type=bind,source=/opt/jenkins-keys,target=/root/.ssh \\</span><br><span class=\"line\">  --hostname jenkins \\</span><br><span class=\"line\">  --network traefik-net \\</span><br><span class=\"line\">  --label traefik.port=8080 \\</span><br><span class=\"line\">  --label traefik.docker.network=traefik-net \\</span><br><span class=\"line\">  --label traefik.frontend.rule=Host:jenkins.maxfun.co \\</span><br><span class=\"line\">  --label traefik.backend=jenkins-backend</span><br><span class=\"line\"> jenkinsci/blueocean:1.3.5</span><br></pre></td></tr></table></figure></p>\n<p>重点参数是下面几个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--network traefik-net \\</span><br><span class=\"line\">--label traefik.port=8080 \\</span><br><span class=\"line\">--label traefik.docker.network=traefik-net \\</span><br><span class=\"line\">--label traefik.frontend.rule=Host:jenkins.maxfun.co \\</span><br><span class=\"line\"></span><br><span class=\"line\">--network </span><br><span class=\"line\"> 指定已创建好的overlay网络</span><br><span class=\"line\">--label traefik.port=8080</span><br><span class=\"line\"> 注册使用这个端口。当容器暴露出多个端口时非常有效。</span><br><span class=\"line\">--label traefik.docker.network=traefik-net </span><br><span class=\"line\"> 设置连接到这个容器的docker网络。 如果容易被链接到多个网络，</span><br><span class=\"line\"> 一定要设置合适的网络名称（你可以使用docker检查&lt;container_id&gt;）否则它将自动选择一个（取决于docker如何返回它们）。</span><br><span class=\"line\">--label traefik.frontend.rule=Host:jenkins.maxfun.co </span><br><span class=\"line\"> 覆盖默认前端规则（默认：Host:&#123;containerName&#125;.&#123;domain&#125;）</span><br><span class=\"line\">--label traefik.backend=jenkins-backend</span><br><span class=\"line\"> 将容器指向 enkins-backend 后端</span><br><span class=\"line\">--traefik.enable=false</span><br><span class=\"line\"> 可以使用docker service update servicename --label-add traefik.enable=false 调整该service不可用，从而达到把应用从负载均衡列表剔除</span><br><span class=\"line\">JENKINS_OPTS=--httpPort=8080</span><br><span class=\"line\"> jenkins参数 --httpPort自定义jenkins端口</span><br></pre></td></tr></table></figure></p>\n<p>更多traefik容器覆盖默认表现方式的Label：<a href=\"https://docs.traefik.cn/toml#docker-backend\" target=\"_blank\" rel=\"noopener\">https://docs.traefik.cn/toml#docker-backend</a></p>\n<p>启动jenkins服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh run-jenkins.sh</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -H Host:jenkins.maxfun.co http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>会返回以下内容，证明成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&apos;refresh&apos; content=&apos;1;url=/login?from=%2F&apos;/&gt;</span><br><span class=\"line\">&lt;script&gt;window.location.replace(&apos;/login?from=%2F&apos;);&lt;/script&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body style=&apos;background-color:white; color:white;&apos;&gt;</span><br><span class=\"line\">Authentication required</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">You are authenticated as: anonymous</span><br><span class=\"line\">Groups that you are in:</span><br><span class=\"line\">  </span><br><span class=\"line\">Permission you need to have (but didn&apos;t): hudson.model.Hudson.Read</span><br><span class=\"line\"> ... which is implied by: hudson.security.Permission.GenericRead</span><br><span class=\"line\"> ... which is implied by: hudson.model.Hudson.Administer</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>就可以愉快的使用域名来访问jenkins啦。</p>\n<h3 id=\"官方文档的例子\"><a href=\"#官方文档的例子\" class=\"headerlink\" title=\"官方文档的例子\"></a>官方文档的例子</h3><p>whoami.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  web:</span><br><span class=\"line\">    image: emilevauge/whoami</span><br><span class=\"line\">    networks: </span><br><span class=\"line\">      - traefik-net</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        - &quot;traefik.backend=whoami-backend&quot;</span><br><span class=\"line\">        - &quot;traefik.port=80&quot;</span><br><span class=\"line\">        - &quot;traefik.docker.network=traefik-net&quot;</span><br><span class=\"line\">        - &quot;traefik.frontend.rule=Host:whoamistack.traefik&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  traefik-net:</span><br><span class=\"line\">    external: true</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">注意： docker-compose文件 labels必须在deploy里面，结构跟上面所示</font>\n\n\n<h4 id=\"启动第一个服务\"><a href=\"#启动第一个服务\" class=\"headerlink\" title=\"启动第一个服务\"></a>启动第一个服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c whoami.yaml whoami1</span><br></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -H Host:whoamistack.traefik http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hostname: 9e402666ec66</span><br><span class=\"line\">IP: 127.0.0.1</span><br><span class=\"line\">IP: 10.0.1.9</span><br><span class=\"line\">IP: 10.0.1.8</span><br><span class=\"line\">IP: 192.168.16.10</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: whoamistack.traefik</span><br><span class=\"line\">User-Agent: curl/7.35.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Accept-Encoding: gzip</span><br><span class=\"line\">X-Forwarded-For: 10.255.0.2</span><br><span class=\"line\">X-Forwarded-Host: whoamistack.traefik</span><br><span class=\"line\">X-Forwarded-Port: 80</span><br><span class=\"line\">X-Forwarded-Proto: http</span><br><span class=\"line\">X-Forwarded-Server: 361dbc4b6660</span><br><span class=\"line\">X-Real-Ip: 10.255.0.2</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动第二个服务\"><a href=\"#启动第二个服务\" class=\"headerlink\" title=\"启动第二个服务\"></a>启动第二个服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker stack deploy -c whoami.yaml whoami12</span><br></pre></td></tr></table></figure>\n<p>多次执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -H Host:whoamistack.traefik http://127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>Hostname: 来回变化，这表明负载均衡功能正常工作了</p>\n<p>资料参考：<a href=\"https://docs.traefik.cn/toml#docker-backend\" target=\"_blank\" rel=\"noopener\">https://docs.traefik.cn/toml#docker-backend</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhigz1zn0000n8vrfmqn8236","tag_id":"cjhigz1zt0002n8vr09y59r5p","_id":"cjhigz1zy0007n8vrju0vt1l6"},{"post_id":"cjhigz1zs0001n8vrdoyf232u","tag_id":"cjhigz1zy0006n8vr7vavasyb","_id":"cjhigz202000cn8vrf04pccl1"},{"post_id":"cjhigz1zs0001n8vrdoyf232u","tag_id":"cjhigz2000009n8vr4052cmj7","_id":"cjhigz202000dn8vrytntiu4f"},{"post_id":"cjhigz1zv0003n8vrwt0j5asi","tag_id":"cjhigz1zt0002n8vr09y59r5p","_id":"cjhigz203000fn8vrgej69jvv"},{"post_id":"cjhigz1zw0004n8vrj93wfsgd","tag_id":"cjhigz1zy0006n8vr7vavasyb","_id":"cjhigz204000in8vrsqzsjgz7"},{"post_id":"cjhigz1zw0004n8vrj93wfsgd","tag_id":"cjhigz203000gn8vrj2kxel3b","_id":"cjhigz204000jn8vr9pw93pl7"},{"post_id":"cjhigz1zx0005n8vrnut1v7yv","tag_id":"cjhigz1zy0006n8vr7vavasyb","_id":"cjhigz204000kn8vrlptxybvc"},{"post_id":"cjhigz1zy0008n8vrm7r0l4qd","tag_id":"cjhigz1zt0002n8vr09y59r5p","_id":"cjhih4lwe0000povrdsc6osyr"}],"Tag":[{"name":"docker","_id":"cjhigz1zt0002n8vr09y59r5p"},{"name":"kubernetes","_id":"cjhigz1zy0006n8vr7vavasyb"},{"name":"jenkins","_id":"cjhigz2000009n8vr4052cmj7"},{"name":"configmap","_id":"cjhigz203000gn8vrj2kxel3b"}]}}